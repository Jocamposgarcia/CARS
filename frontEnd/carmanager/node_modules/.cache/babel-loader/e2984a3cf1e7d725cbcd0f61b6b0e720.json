{"ast":null,"code":"var _jsxFileName = \"/Users/cp/Documents/gitProject/CARS/frontEnd/carmanager/src/Home.js\";\nimport React, { Component } from 'react';\nimport { getCars, addCars, editCar, deleteCar } from './actions/car';\nimport { connect } from 'react-redux';\nimport axios from 'axios';\nimport store from './store';\nimport { AgGridReact, AgGridColumn } from 'ag-grid-react';\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-balham.css';\nimport 'ag-grid-enterprise';\nimport _ from 'lodash';\n\nclass Home extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      columnDefs: [{\n        headerName: 'Make',\n        field: 'make',\n        editable: true,\n        checkboxSelection: true // headerName: 'Make', field: 'make', editable: true, checkboxSelection: true, cellEditor: 'agSelectCellEditor',\n        // cellEditorParams: {\n        //     values: Object.keys()\n        // },\n        // valueFormatter: function (params) {\n        //     return lookupValue(carMappings, params.value);\n        // },\n        // valueParser: function (params) {\n        //     return lookupKey(carMappings, params.newValue);\n        // }\n\n      }, {\n        headerName: 'Model',\n        field: 'model',\n        editable: true\n      }, {\n        headerName: 'Year',\n        field: 'year',\n        editable: true\n      }, {\n        headerName: 'Mileage',\n        field: 'mileage',\n        editable: true\n      }],\n      rowData: null,\n      gridApi: {},\n      columnApi: null,\n      dropDown: null\n    };\n\n    this.changeColumns = () => {\n      this.setState({\n        columnDefs: [{\n          headerName: 'Make11',\n          field: 'make',\n          editable: true,\n          checkboxSelection: true\n        }, {\n          headerName: 'Model',\n          field: 'model',\n          editable: true\n        }, {\n          headerName: 'Year',\n          field: 'year',\n          editable: true\n        }, {\n          headerName: 'Mileage',\n          field: 'mileage',\n          editable: true\n        }]\n      });\n    };\n\n    this.onNewRowClick = () => {\n      const newCar = {\n        \"make\": '',\n        \"model\": '',\n        \"year\": '',\n        \"mileage\": ''\n      };\n      this.state.gridApi.updateRowData({\n        add: [newCar],\n        addIndex: 0\n      });\n      this.state.gridApi.startEditingCell({\n        rowIndex: 0,\n        colKey: 'model'\n      }); // this.state.gridApi.setFocusedCell(0, \"model\")\n    };\n\n    this.onGetSelectedRows = e => {\n      const selectedNodes = this.state.gridApi.getSelectedNodes();\n      console.log('selected nodes', selectedNodes);\n      console.log(this.columnApi.getColumnState());\n      this.columnApi.resetColumnState();\n      var allData = [];\n      this.gridApi.forEachNode(node => allData.push(node));\n      console.log('all Data: ', allData);\n    };\n\n    this.editCars = () => {\n      const newCar = {\n        \"make\": \"WFord\",\n        \"model\": \"Caravan4\",\n        \"year\": 2000,\n        \"mileage\": 2000\n      };\n      this.props.editCar(1, newCar);\n    };\n\n    this.displayprops = () => {\n      console.log('props: ', this.props.cars);\n    };\n\n    this.addCar = () => {\n      const newCar = {\n        \"make\": \"newCar\",\n        \"model\": \"BMW\",\n        \"year\": 2020,\n        \"mileage\": 2000\n      };\n      Promise.resolve(this.props.addCars(newCar)).then(() => this.setState({\n        rowData: this.props.cars\n      }));\n    };\n\n    this.onGridReady = async params => {\n      this.setState({\n        gridApi: params.api,\n        columnApi: params.columnApi\n      });\n      this.gridApi = params.api;\n      this.columnApi = params.columnApi;\n      console.log('onGrid is ready', this.gridApi, '\\n', this.props.cars);\n      Promise.resolve(this.props.getCars()).then(() => {\n        console.log('reaqdyyy: ', this.props.cars); // this.gridApi.setColumnDefs(\n        //     [\n        //         {\n        //             headerName: 'Make', field: 'make', editable: true, checkboxSelection: true\n        //             // , cellEditor: 'agSelectCellEditor',\n        //             // cellEditorParams: {\n        //             //     values: Object.keys()\n        //             // },\n        //             // valueFormatter: function (params) {\n        //             //     return lookupValue(carMappings, params.value);\n        //             // },\n        //             // valueParser: function (params) {\n        //             //     return lookupKey(carMappings, params.newValue);\n        //             // }\n        //         },\n        //         { headerName: 'Model', field: 'model', editable: true },\n        //         { headerName: 'Year', field: 'year', editable: true },\n        //         { headerName: 'Mileage', field: 'mileage', editable: true }\n        //     ]\n        // )\n      }); // this.gridApi.setColumnDefs(\n      //     [\n      //         {\n      //             headerName: 'Make', field: 'make', editable: true, checkboxSelection: true\n      //             // , cellEditor: 'agSelectCellEditor',\n      //             // cellEditorParams: {\n      //             //     values: Object.keys()\n      //             // },\n      //             // valueFormatter: function (params) {\n      //             //     return lookupValue(carMappings, params.value);\n      //             // },\n      //             // valueParser: function (params) {\n      //             //     return lookupKey(carMappings, params.newValue);\n      //             // }\n      //         },\n      //         { headerName: 'Model', field: 'model', editable: true },\n      //         { headerName: 'Year', field: 'year', editable: true },\n      //         { headerName: 'Mileage', field: 'mileage', editable: true }\n      //     ]\n      // )\n    };\n  }\n\n  async componentDidMount() {\n    await this.props.getCars();\n    console.log('componentDidmount'); // this.setState({ rowData: this.props.cars })\n\n    const makes = this.props.cars.reduce((obj, item) => Object.assign(obj, {\n      [item.id]: item.make\n    }), {});\n    this.setState(state => ({\n      columnDefs: [{\n        headerName: 'Make',\n        field: 'make',\n        editable: true,\n        checkboxSelection: true,\n        cellEditor: 'agSelectCellEditor',\n        cellEditorParams: {\n          values: Object.keys(makes)\n        },\n        valueFormatter: function (params) {\n          return makes[params.value];\n        },\n        valueParser: function (params) {\n          return lookupKey(makes, params.newValue);\n        }\n      }, state.columnDefs[1], // { headerName: 'Model', field: 'model', editable: true },\n      state.columnDefs[2], // { headerName: 'Year', field: 'year', editable: true },\n      state.columnDefs[3] // { headerName: 'Mileage', field: 'mileage', editable: true }\n      ]\n    }));\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.state.gridApi !== prevState.gridApi) {\n      console.log('gridApi not undefined: ', this.state.gridApi);\n    } // if (this.state.columnDefs !== prevState.columnDefs) {\n    //     // console.log('column def has changed')\n    // }\n\n\n    if (this.state.columnApi !== prevState.columnApi) {\n      var columnState = this.state.columnApi.getColumnState();\n      console.log('column def has changed', columnState);\n    } // if (!_.isEqual(this.props.cars, prevProps.cars)) {\n    //     console.log('column def is being updated')\n    //     const makes = this.props.cars.reduce((obj, item) => Object.assign(obj, { [item.id]: item.make }), {})\n    //     this.setState((state) => ({\n    //         columnDefs: [\n    //             {\n    //                 headerName: 'Make', field: 'make', editable: true, checkboxSelection: true\n    //                 , cellEditor: 'agSelectCellEditor',\n    //                 cellEditorParams: {\n    //                     values: Object.keys(makes)\n    //                 },\n    //                 valueFormatter: function (params) {\n    //                     return makes[params.value];\n    //                 },\n    //                 valueParser: function (params) {\n    //                     return lookupKey(makes, params.newValue);\n    //                 }\n    //             },\n    //             state.columnDefs[1],\n    //             // { headerName: 'Model', field: 'model', editable: true },\n    //             state.columnDefs[2],\n    //             // { headerName: 'Year', field: 'year', editable: true },\n    //             state.columnDefs[3]\n    //             // { headerName: 'Mileage', field: 'mileage', editable: true }\n    //         ]\n    //     }), () => {\n    //         // if (this.state.columnApi !== null) {\n    //         //     this.state.columnApi.resetColumnState();\n    //         // }\n    //     })\n    // }\n\n  }\n\n  componentWillUnmount() {\n    console.log('unmounting...');\n  }\n\n  saveData() {\n    // let dbData = this.props.cars\n    let tableData = [];\n    console.log('1'); //populating the array with data\n\n    this.state.gridApi.forEachNode(node => tableData.push(node.data));\n    console.log('1');\n    console.log('tableData : ', tableData);\n    console.log('dbData: ', this.props.cars);\n    console.log('length');\n\n    for (var i = 0; i < tableData.length; i = i + 1) {\n      console.log('1'); // let dbDataObject = dbData[i];\n\n      let tableDataObject = tableData[i];\n      console.log('DbDataObject: ', this.props.cars[i], '\\n', 'tableDataObject: ', tableDataObject);\n\n      if (this.props.cars[i], tableDataObject) {} else {\n        store.dispatch(editCar(tableDataObject.id, tableDataObject));\n        console.log('still doing something ..');\n      }\n    }\n  }\n\n  render() {\n    console.log('render.. ', this.props.cars);\n\n    if (this.state.columnApi !== null) {\n      this.state.columnApi.resetColumnState();\n    }\n\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 323,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.addCar,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 324,\n        columnNumber: 17\n      }\n    }, \"Add new car\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.editCars,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 325,\n        columnNumber: 17\n      }\n    }, \"Edit car with id 1\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.changeColumns,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 326,\n        columnNumber: 17\n      }\n    }, \"Edit column defs\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.onGetSelectedRows,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 327,\n        columnNumber: 17\n      }\n    }, \"Get selected rows\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.onNewRowClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 328,\n        columnNumber: 17\n      }\n    }, \"add new row\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.saveData(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 329,\n        columnNumber: 17\n      }\n    }, \"Save Data\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.displayprops,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 330,\n        columnNumber: 17\n      }\n    }, \"display props\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"ag-theme-balham\",\n      style: {\n        height: '200px',\n        width: '800px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 331,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(AgGridReact, {\n      onGridReady: this.onGridReady,\n      enableSorting: true,\n      columnDefs: this.state.columnDefs,\n      rowData: this.props.cars,\n      singleClickEdit: true // allows a single click to enable cell/row editing \n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 333,\n        columnNumber: 21\n      }\n    })));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  cars: state.carReducer.cars\n});\n\nexport default connect(mapStateToProps, {\n  getCars,\n  addCars,\n  editCar,\n  deleteCar\n})(Home);\n\nfunction extractValues(mappings) {\n  return Object.keys(mappings);\n}\n\nfunction lookupValue(mappings, key) {\n  return mappings[key];\n}\n\nfunction lookupKey(mappings, name) {\n  for (var key in mappings) {\n    if (mappings.hasOwnProperty(key)) {\n      if (name === mappings[key]) {\n        return key;\n      }\n    }\n  }\n} // let result = Promise.resolve(store.dispatch(addCars(newCar)))\n//     .then(() => { console.log(this.props.cars) })\n// axios.get('http://localhost:8000/api/cars/')\n//   .then((response => {\n//     console.log('response: ', response.data)\n//   }))\n// let response = await fetch('http://localhost:8000/api/cars/');\n// let data = await response.json()\n// console.log('data :', data)\n// state = {\n//     cars: ['cars']\n// }\n// componentDidMount() {\n//     this.props.getCars()\n// }\n// editCars = () => {\n//     const newCar = {\n//         \"make\": \"111\",\n//         \"model\": \"Caravan\",\n//         \"year\": 2000,\n//         \"mileage\": 2000\n//     }\n//     this.props.editCar(80, newCar)\n// }\n// deleteCar = () => {\n//     this.props.deleteCar(2)\n// }\n// dispatchCars = () => {\n//     const newCar = {\n//         \"make\": \"Dodge\",\n//         \"model\": \"Caravan\",\n//         \"year\": 2003,\n//         \"mileage\": 250000\n//     }\n//     this.props.addCars(newCar)\n//     console.log(this.props.cars)\n// }\n// dispatchCars1 = () => {\n//     const newCar = {\n//         \"make\": \"Dodge\",\n//         \"model\": \"Caravan\",\n//         \"year\": 2003,\n//         \"mileage\": 250000\n//     }\n//     store.dispatch(addCars(newCar))\n// }\n// return (\n//     <div>\n//         <p>{this.state.cars}</p>\n//         <p>working</p>\n//         <button onClick={this.dispatchCars}>this.props.addCars(newCar)</button>\n//         <br />\n//         <button onClick={this.dispatchCars1}>store.dispatch(newCar)</button>\n//         <br />\n//         <button onClick={this.editCars}>Edit car with id 2</button>\n//         <br />\n//         <button onClick={this.deleteCar}>Delete car with id2</button>\n//         {\n//             this.props.cars.map(car => {\n//                 return <h1>{car.make}</h1>\n//             })\n//         }\n//     </div >\n// )\n// componentDidUpdate(prevProps, prevState) {\n//     if (this.state.gridApi !== prevState.gridApi) {\n//         console.log('gridApi not undefined: ', this.state.gridApi)\n//     }\n// }\n// GRID IS READY AND THIS.PROPS.DATA IS AVAILABLE.\n// onGridReady = async (params) => {\n//     this.setState({ gridApi: params.api })\n//     this.gridApi = params.api;\n//     this.columnApi = params.columnApi;\n//     console.log('onGrid is ready', this.gridApi, '\\n', this.props.cars)\n//     Promise.resolve(this.props.getCars()).then(() => {\n//         console.log('reaqdyyy: ', this.props.cars)\n//         this.gridApi.setColumnDefs(","map":{"version":3,"sources":["/Users/cp/Documents/gitProject/CARS/frontEnd/carmanager/src/Home.js"],"names":["React","Component","getCars","addCars","editCar","deleteCar","connect","axios","store","AgGridReact","AgGridColumn","_","Home","state","columnDefs","headerName","field","editable","checkboxSelection","rowData","gridApi","columnApi","dropDown","changeColumns","setState","onNewRowClick","newCar","updateRowData","add","addIndex","startEditingCell","rowIndex","colKey","onGetSelectedRows","e","selectedNodes","getSelectedNodes","console","log","getColumnState","resetColumnState","allData","forEachNode","node","push","editCars","props","displayprops","cars","addCar","Promise","resolve","then","onGridReady","params","api","componentDidMount","makes","reduce","obj","item","Object","assign","id","make","cellEditor","cellEditorParams","values","keys","valueFormatter","value","valueParser","lookupKey","newValue","componentDidUpdate","prevProps","prevState","columnState","componentWillUnmount","saveData","tableData","data","i","length","tableDataObject","dispatch","render","height","width","mapStateToProps","carReducer","extractValues","mappings","lookupValue","key","name","hasOwnProperty"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { getCars, addCars, editCar, deleteCar } from './actions/car';\nimport { connect, } from 'react-redux';\nimport axios from 'axios';\nimport store from './store'\n\nimport { AgGridReact, AgGridColumn } from 'ag-grid-react';\n\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-balham.css';\nimport 'ag-grid-enterprise';\nimport _ from 'lodash';\n\n\nclass Home extends Component {\n\n    state = {\n        columnDefs: [\n            {\n                headerName: 'Make', field: 'make', editable: true, checkboxSelection: true\n\n                // headerName: 'Make', field: 'make', editable: true, checkboxSelection: true, cellEditor: 'agSelectCellEditor',\n                // cellEditorParams: {\n                //     values: Object.keys()\n                // },\n                // valueFormatter: function (params) {\n                //     return lookupValue(carMappings, params.value);\n                // },\n                // valueParser: function (params) {\n                //     return lookupKey(carMappings, params.newValue);\n                // }\n            },\n            { headerName: 'Model', field: 'model', editable: true },\n            { headerName: 'Year', field: 'year', editable: true },\n            { headerName: 'Mileage', field: 'mileage', editable: true }\n        ],\n        rowData: null,\n        gridApi: {},\n        columnApi: null,\n        dropDown: null\n    }\n\n    async componentDidMount() {\n        await this.props.getCars();\n        console.log('componentDidmount')\n        // this.setState({ rowData: this.props.cars })\n\n        const makes = this.props.cars.reduce((obj, item) => Object.assign(obj, { [item.id]: item.make }), {})\n\n        this.setState((state) => ({\n            columnDefs: [\n                {\n                    headerName: 'Make', field: 'make', editable: true, checkboxSelection: true\n                    , cellEditor: 'agSelectCellEditor',\n                    cellEditorParams: {\n                        values: Object.keys(makes)\n                    },\n                    valueFormatter: function (params) {\n                        return makes[params.value];\n                    },\n                    valueParser: function (params) {\n                        return lookupKey(makes, params.newValue);\n                    }\n                },\n                state.columnDefs[1],\n                // { headerName: 'Model', field: 'model', editable: true },\n\n                state.columnDefs[2],\n                // { headerName: 'Year', field: 'year', editable: true },\n\n                state.columnDefs[3]\n                // { headerName: 'Mileage', field: 'mileage', editable: true }\n            ]\n        }))\n\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (this.state.gridApi !== prevState.gridApi) {\n            console.log('gridApi not undefined: ', this.state.gridApi)\n        }\n\n        // if (this.state.columnDefs !== prevState.columnDefs) {\n        //     // console.log('column def has changed')\n\n        // }\n\n        if (this.state.columnApi !== prevState.columnApi) {\n            var columnState = this.state.columnApi.getColumnState();\n            console.log('column def has changed', columnState)\n\n\n\n        }\n        // if (!_.isEqual(this.props.cars, prevProps.cars)) {\n        //     console.log('column def is being updated')\n\n        //     const makes = this.props.cars.reduce((obj, item) => Object.assign(obj, { [item.id]: item.make }), {})\n\n        //     this.setState((state) => ({\n        //         columnDefs: [\n        //             {\n        //                 headerName: 'Make', field: 'make', editable: true, checkboxSelection: true\n        //                 , cellEditor: 'agSelectCellEditor',\n        //                 cellEditorParams: {\n        //                     values: Object.keys(makes)\n        //                 },\n        //                 valueFormatter: function (params) {\n        //                     return makes[params.value];\n        //                 },\n        //                 valueParser: function (params) {\n        //                     return lookupKey(makes, params.newValue);\n        //                 }\n        //             },\n        //             state.columnDefs[1],\n        //             // { headerName: 'Model', field: 'model', editable: true },\n\n        //             state.columnDefs[2],\n        //             // { headerName: 'Year', field: 'year', editable: true },\n\n        //             state.columnDefs[3]\n        //             // { headerName: 'Mileage', field: 'mileage', editable: true }\n        //         ]\n        //     }), () => {\n        //         // if (this.state.columnApi !== null) {\n        //         //     this.state.columnApi.resetColumnState();\n        //         // }\n\n        //     })\n        // }\n\n\n\n\n\n    }\n\n    componentWillUnmount() {\n        console.log('unmounting...')\n    }\n\n    changeColumns = () => {\n        this.setState({\n            columnDefs: [\n                { headerName: 'Make11', field: 'make', editable: true, checkboxSelection: true },\n                { headerName: 'Model', field: 'model', editable: true },\n                { headerName: 'Year', field: 'year', editable: true },\n                { headerName: 'Mileage', field: 'mileage', editable: true }\n            ]\n        })\n\n    }\n\n    onNewRowClick = () => {\n        const newCar = {\n            \"make\": '',\n            \"model\": '',\n            \"year\": '',\n            \"mileage\": ''\n        }\n\n        this.state.gridApi.updateRowData(\n            { add: [newCar], addIndex: 0 }\n\n        )\n        this.state.gridApi.startEditingCell(\n            {\n                rowIndex: 0,\n                colKey: 'model'\n            })\n        // this.state.gridApi.setFocusedCell(0, \"model\")\n\n\n    }\n\n\n    onGetSelectedRows = e => {\n        const selectedNodes = this.state.gridApi.getSelectedNodes()\n        console.log('selected nodes', selectedNodes)\n        console.log(this.columnApi.getColumnState())\n        this.columnApi.resetColumnState()\n        var allData = [];\n        this.gridApi.forEachNode((node) =>\n            allData.push(node)\n        )\n        console.log('all Data: ', allData)\n    }\n\n    editCars = () => {\n        const newCar = {\n            \"make\": \"WFord\",\n            \"model\": \"Caravan4\",\n            \"year\": 2000,\n            \"mileage\": 2000\n        }\n\n        this.props.editCar(1, newCar)\n    }\n\n    saveData() {\n        // let dbData = this.props.cars\n        let tableData = []\n        console.log('1')\n        //populating the array with data\n        this.state.gridApi.forEachNode(node =>\n            tableData.push(node.data)\n\n        )\n        console.log('1')\n\n\n        console.log('tableData : ', tableData)\n        console.log('dbData: ', this.props.cars)\n        console.log('length')\n        for (var i = 0; i < tableData.length; i = i + 1) {\n            console.log('1')\n            // let dbDataObject = dbData[i];\n            let tableDataObject = tableData[i];\n            console.log('DbDataObject: ', this.props.cars[i], '\\n',\n                'tableDataObject: ', tableDataObject,\n            )\n            if (this.props.cars[i], tableDataObject) {\n\n            }\n            else {\n                store.dispatch(editCar(tableDataObject.id, tableDataObject));\n                console.log('still doing something ..')\n            }\n        }\n\n\n\n\n    }\n\n    displayprops = () => {\n        console.log('props: ', this.props.cars)\n    }\n\n    addCar = () => {\n        const newCar = {\n            \"make\": \"newCar\",\n            \"model\": \"BMW\",\n            \"year\": 2020,\n            \"mileage\": 2000\n        }\n        Promise.resolve(this.props.addCars(newCar)).then(() =>\n            this.setState({ rowData: this.props.cars }))\n    }\n\n    onGridReady = async (params) => {\n        this.setState({\n            gridApi: params.api,\n            columnApi: params.columnApi\n        })\n\n        this.gridApi = params.api;\n        this.columnApi = params.columnApi;\n\n\n        console.log('onGrid is ready', this.gridApi, '\\n', this.props.cars)\n        Promise.resolve(this.props.getCars()).then(() => {\n            console.log('reaqdyyy: ', this.props.cars)\n            // this.gridApi.setColumnDefs(\n            //     [\n            //         {\n            //             headerName: 'Make', field: 'make', editable: true, checkboxSelection: true\n            //             // , cellEditor: 'agSelectCellEditor',\n            //             // cellEditorParams: {\n            //             //     values: Object.keys()\n            //             // },\n            //             // valueFormatter: function (params) {\n            //             //     return lookupValue(carMappings, params.value);\n            //             // },\n            //             // valueParser: function (params) {\n            //             //     return lookupKey(carMappings, params.newValue);\n            //             // }\n            //         },\n            //         { headerName: 'Model', field: 'model', editable: true },\n            //         { headerName: 'Year', field: 'year', editable: true },\n            //         { headerName: 'Mileage', field: 'mileage', editable: true }\n            //     ]\n            // )\n\n\n        })\n        // this.gridApi.setColumnDefs(\n        //     [\n        //         {\n        //             headerName: 'Make', field: 'make', editable: true, checkboxSelection: true\n        //             // , cellEditor: 'agSelectCellEditor',\n        //             // cellEditorParams: {\n        //             //     values: Object.keys()\n        //             // },\n        //             // valueFormatter: function (params) {\n        //             //     return lookupValue(carMappings, params.value);\n        //             // },\n        //             // valueParser: function (params) {\n        //             //     return lookupKey(carMappings, params.newValue);\n        //             // }\n        //         },\n        //         { headerName: 'Model', field: 'model', editable: true },\n        //         { headerName: 'Year', field: 'year', editable: true },\n        //         { headerName: 'Mileage', field: 'mileage', editable: true }\n        //     ]\n        // )\n\n    }\n\n\n\n\n\n\n    render() {\n        console.log('render.. ', this.props.cars)\n        if (this.state.columnApi !== null) {\n            this.state.columnApi.resetColumnState()\n\n        }\n\n        return (\n            <React.Fragment>\n                <button onClick={this.addCar}>Add new car</button>\n                <button onClick={this.editCars}>Edit car with id 1</button>\n                <button onClick={this.changeColumns}>Edit column defs</button>\n                <button onClick={this.onGetSelectedRows}>Get selected rows</button>\n                <button onClick={this.onNewRowClick}>add new row</button>\n                <button onClick={() => this.saveData()}>Save Data</button>\n                <button onClick={this.displayprops}>display props</button>\n                <div className=\"ag-theme-balham\" style={{ height: '200px', width: '800px' }}>\n\n                    <AgGridReact\n                        onGridReady={this.onGridReady}\n\n                        enableSorting={true}\n                        columnDefs={this.state.columnDefs}\n                        rowData={this.props.cars}\n                        singleClickEdit={true}   // allows a single click to enable cell/row editing \n\n\n                    >\n                        {/* <AgGridColumn headerName='Make' field='make' editable={true} checkboxSelection={true}></AgGridColumn>\n                        <AgGridColumn headerName='Model' field='model' editable={true} ></AgGridColumn>\n                        <AgGridColumn headerName='Year' field='year' editable={true} ></AgGridColumn>\n                        <AgGridColumn headerName='Mileage' field='mileage' editable={true} ></AgGridColumn> */}\n\n\n\n\n\n                    </AgGridReact>\n                </div>\n            </React.Fragment>\n        )\n    }\n}\n\n\n\nconst mapStateToProps = (state) => ({\n    cars: state.carReducer.cars\n});\n\nexport default connect(mapStateToProps,\n    { getCars, addCars, editCar, deleteCar })(Home)\n\n\n\nfunction extractValues(mappings) {\n    return Object.keys(mappings);\n}\nfunction lookupValue(mappings, key) {\n    return mappings[key];\n}\nfunction lookupKey(mappings, name) {\n    for (var key in mappings) {\n        if (mappings.hasOwnProperty(key)) {\n            if (name === mappings[key]) {\n                return key;\n            }\n        }\n    }\n}\n\n\n        // let result = Promise.resolve(store.dispatch(addCars(newCar)))\n        //     .then(() => { console.log(this.props.cars) })\n\n\n    // axios.get('http://localhost:8000/api/cars/')\n    //   .then((response => {\n    //     console.log('response: ', response.data)\n\n    //   }))\n\n    // let response = await fetch('http://localhost:8000/api/cars/');\n    // let data = await response.json()\n    // console.log('data :', data)\n\n\n    // state = {\n    //     cars: ['cars']\n    // }\n\n    // componentDidMount() {\n    //     this.props.getCars()\n    // }\n\n    // editCars = () => {\n    //     const newCar = {\n    //         \"make\": \"111\",\n    //         \"model\": \"Caravan\",\n    //         \"year\": 2000,\n    //         \"mileage\": 2000\n    //     }\n\n    //     this.props.editCar(80, newCar)\n\n\n    // }\n\n    // deleteCar = () => {\n    //     this.props.deleteCar(2)\n\n    // }\n\n    // dispatchCars = () => {\n\n    //     const newCar = {\n    //         \"make\": \"Dodge\",\n    //         \"model\": \"Caravan\",\n    //         \"year\": 2003,\n    //         \"mileage\": 250000\n\n\n    //     }\n\n    //     this.props.addCars(newCar)\n    //     console.log(this.props.cars)\n\n    // }\n\n\n    // dispatchCars1 = () => {\n\n    //     const newCar = {\n    //         \"make\": \"Dodge\",\n    //         \"model\": \"Caravan\",\n    //         \"year\": 2003,\n    //         \"mileage\": 250000\n\n    //     }\n\n\n\n    //     store.dispatch(addCars(newCar))\n\n\n\n    // }\n\n\n\n    // return (\n    //     <div>\n    //         <p>{this.state.cars}</p>\n    //         <p>working</p>\n    //         <button onClick={this.dispatchCars}>this.props.addCars(newCar)</button>\n    //         <br />\n    //         <button onClick={this.dispatchCars1}>store.dispatch(newCar)</button>\n    //         <br />\n    //         <button onClick={this.editCars}>Edit car with id 2</button>\n    //         <br />\n    //         <button onClick={this.deleteCar}>Delete car with id2</button>\n\n\n    //         {\n    //             this.props.cars.map(car => {\n    //                 return <h1>{car.make}</h1>\n    //             })\n    //         }\n\n    //     </div >\n    // )\n\n      // componentDidUpdate(prevProps, prevState) {\n    //     if (this.state.gridApi !== prevState.gridApi) {\n    //         console.log('gridApi not undefined: ', this.state.gridApi)\n    //     }\n    // }\n\n\n\n\n// GRID IS READY AND THIS.PROPS.DATA IS AVAILABLE.\n\n    // onGridReady = async (params) => {\n    //     this.setState({ gridApi: params.api })\n    //     this.gridApi = params.api;\n    //     this.columnApi = params.columnApi;\n    //     console.log('onGrid is ready', this.gridApi, '\\n', this.props.cars)\n    //     Promise.resolve(this.props.getCars()).then(() => {\n    //         console.log('reaqdyyy: ', this.props.cars)\n    //         this.gridApi.setColumnDefs("]},"metadata":{},"sourceType":"module"}