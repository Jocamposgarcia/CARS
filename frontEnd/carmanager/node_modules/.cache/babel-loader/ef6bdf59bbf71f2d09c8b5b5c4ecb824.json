{"ast":null,"code":"var _jsxFileName = \"/Users/cp/Documents/gitProject/CARS/frontEnd/carmanager/src/Home.js\";\nimport React, { Component } from 'react';\nimport { getCars, addCars, editCar, deleteCar } from './actions/car';\nimport { connect } from 'react-redux';\nimport axios from 'axios';\nimport store from './store';\nimport { AgGridReact, AgGridColumn } from 'ag-grid-react';\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-balham.css';\nimport 'ag-grid-enterprise';\nimport _ from 'lodash';\n\nclass Home extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      columnDefs: [{\n        headerName: 'Make',\n        field: 'make',\n        editable: true,\n        checkboxSelection: true // headerName: 'Make', field: 'make', editable: true, checkboxSelection: true, cellEditor: 'agSelectCellEditor',\n        // cellEditorParams: {\n        //     values: Object.keys()\n        // },\n        // valueFormatter: function (params) {\n        //     return lookupValue(carMappings, params.value);\n        // },\n        // valueParser: function (params) {\n        //     return lookupKey(carMappings, params.newValue);\n        // }\n\n      }, {\n        headerName: 'Model',\n        field: 'model',\n        editable: true\n      }, {\n        headerName: 'Year',\n        field: 'year',\n        editable: true\n      }, {\n        headerName: 'Mileage',\n        field: 'mileage',\n        editable: true\n      }],\n      rowDataCopy: null,\n      rowData: null,\n      gridApi: {},\n      columnApi: null,\n      dropDown: null,\n      getRowNodeId: function (data) {\n        console.log('data.trade: ', data);\n        return data.trade;\n      }\n    };\n\n    this.changeColumns = () => {\n      this.setState({\n        columnDefs: [{\n          headerName: 'Make11',\n          field: 'make',\n          editable: true,\n          checkboxSelection: true\n        }, {\n          headerName: 'Model',\n          field: 'model',\n          editable: true\n        }, {\n          headerName: 'Year',\n          field: 'year',\n          editable: true\n        }, {\n          headerName: 'Mileage',\n          field: 'mileage',\n          editable: true\n        }]\n      });\n    };\n\n    this.onNewRowClick = () => {\n      const newCar = {\n        \"make\": '',\n        \"model\": '',\n        \"year\": '',\n        \"mileage\": ''\n      };\n      this.state.gridApi.updateRowData({\n        add: [newCar],\n        addIndex: 0\n      });\n      this.state.gridApi.startEditingCell({\n        rowIndex: 0,\n        colKey: 'model'\n      }); // this.state.gridApi.setFocusedCell(0, \"model\")\n    };\n\n    this.onGetSelectedRows = e => {\n      const selectedNodes = this.state.gridApi.getSelectedNodes();\n      console.log('selected nodes', selectedNodes);\n      console.log(this.columnApi.getColumnState());\n      this.columnApi.resetColumnState();\n      var allData = [];\n      this.gridApi.forEachNode(node => allData.push(node));\n      console.log('all Data: ', allData);\n    };\n\n    this.editCars = () => {\n      const newCar = {\n        \"make\": \"WFord\",\n        \"model\": \"Caravan4\",\n        \"year\": 2000,\n        \"mileage\": 2000\n      };\n      this.props.editCar(1, newCar);\n    };\n\n    this.saveData = () => {\n      let dbData = this.props.cars;\n      let tableData = [];\n      console.log('1'); //populating the array with data\n\n      this.gridApi.forEachNode(node => tableData.push(node.data));\n      console.log('1');\n      console.log('tableData : ', tableData);\n      console.log('dbData: ', this.props.cars);\n      console.log('length');\n      var i = 0;\n\n      for (i; i < this.props.cars.length; i = i + 1) {\n        console.log('Array length: ', this.props.cars.length);\n        console.log('current i: ', i);\n        let dbDataObject = dbData[i];\n        let tableDataObject = tableData[i];\n        console.log('DbDataObject: ', this.props.cars[i], '\\n', 'tableDataObject: ', tableDataObject);\n\n        if (!_.isEqual(this.state.rowDataCopy, tableDataObject)) {\n          this.props.editCar(tableDataObject.id, tableDataObject);\n          console.log('they are different.');\n        } else {// }\n        }\n      }\n    };\n\n    this.trial = () => {};\n\n    this.displayprops = () => {\n      console.log('props: ', this.props.cars);\n    };\n\n    this.addCar = () => {\n      const newCar = {\n        \"make\": \"newCar\",\n        \"model\": \"BMW\",\n        \"year\": 2020,\n        \"mileage\": 2000\n      };\n      Promise.resolve(this.props.addCars(newCar)).then(() => this.setState({\n        rowData: this.props.cars\n      }));\n    };\n\n    this.onGridReady = async params => {\n      this.setState({\n        gridApi: params.api,\n        columnApi: params.columnApi\n      });\n      this.gridApi = params.api;\n      this.columnApi = params.columnApi;\n      console.log('onGrid is ready', this.gridApi, '\\n', this.props.cars); // Promise.resolve(this.props.getCars()).then(() => {\n\n      console.log('reaqdyyy: ', this.props.cars); // this.gridApi.setColumnDefs(\n      //     [\n      //         {\n      //             headerName: 'Make', field: 'make', editable: true, checkboxSelection: true\n      //             // , cellEditor: 'agSelectCellEditor',\n      //             // cellEditorParams: {\n      //             //     values: Object.keys()\n      //             // },\n      //             // valueFormatter: function (params) {\n      //             //     return lookupValue(carMappings, params.value);\n      //             // },\n      //             // valueParser: function (params) {\n      //             //     return lookupKey(carMappings, params.newValue);\n      //             // }\n      //         },\n      //         { headerName: 'Model', field: 'model', editable: true },\n      //         { headerName: 'Year', field: 'year', editable: true },\n      //         { headerName: 'Mileage', field: 'mileage', editable: true }\n      //     ]\n      // )\n      // })\n      // this.gridApi.setColumnDefs(\n      //     [\n      //         {\n      //             headerName: 'Make', field: 'make', editable: true, checkboxSelection: true\n      //             // , cellEditor: 'agSelectCellEditor',\n      //             // cellEditorParams: {\n      //             //     values: Object.keys()\n      //             // },\n      //             // valueFormatter: function (params) {\n      //             //     return lookupValue(carMappings, params.value);\n      //             // },\n      //             // valueParser: function (params) {\n      //             //     return lookupKey(carMappings, params.newValue);\n      //             // }\n      //         },\n      //         { headerName: 'Model', field: 'model', editable: true },\n      //         { headerName: 'Year', field: 'year', editable: true },\n      //         { headerName: 'Mileage', field: 'mileage', editable: true }\n      //     ]\n      // )\n    };\n  }\n\n  async componentDidMount() {\n    await this.props.getCars();\n    console.log('componentDidmount'); // this.setState({ rowData: this.props.cars })\n\n    const makes = this.props.cars.reduce((obj, item) => Object.assign(obj, {\n      [item.id]: item.make\n    }), {});\n    this.setState(state => ({\n      columnDefs: [{\n        headerName: 'Make',\n        field: 'make',\n        editable: true,\n        checkboxSelection: true,\n        // cellEditor: 'agSelectCellEditor',\n        // cellEditorParams: {\n        //     //keys\n        //     values: Object.keys(makes)\n        // },\n        valueGetter: function (params) {\n          console.log('value getter: ', params.node);\n          return params.node.data.make;\n        },\n        valueSetter: function (params) {\n          console.log('value setter:');\n          params.data.make = params.newValue;\n          return true;\n        },\n        //displaying values\n        valueFormatter: function (params) {\n          // return makes[params.value];\n          return '$' + params.value;\n        } //converting back to keys before saving.\n        // valueParser: function (params) {\n        //     return lookupKey(makes, params.newValue);\n        // }\n\n      }, state.columnDefs[1], // { headerName: 'Model', field: 'model', editable: true },\n      state.columnDefs[2], // { headerName: 'Year', field: 'year', editable: true },\n      state.columnDefs[3] // { headerName: 'Mileage', field: 'mileage', editable: true }\n      ],\n      // rowData: this.props.cars.concat()\n      rowDataCopy: JSON.parse(JSON.stringify(this.props.cars))\n    }));\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.state.gridApi !== prevState.gridApi) {\n      console.log('gridApi not undefined: ', this.state.gridApi);\n      this.state.gridApi.setRowData(this.props.cars);\n    } // if (this.state.columnDefs !== prevState.columnDefs) {\n    //     // console.log('column def has changed')\n    // }\n\n\n    if (this.state.columnApi !== prevState.columnApi) {\n      var columnState = this.state.columnApi.getColumnState();\n      console.log('column def has changed', columnState);\n    }\n\n    if (this.props.cars !== prevProps.cars) {\n      console.log('car props CHANGING...');\n      this.setState({\n        rowDataCopy: JSON.parse(JSON.stringify(this.props.cars))\n      });\n    } // if (!_.isEqual(this.props.cars, prevProps.cars)) {\n    //     console.log('column def is being updated')\n    //     const makes = this.props.cars.reduce((obj, item) => Object.assign(obj, { [item.id]: item.make }), {})\n    //     this.setState((state) => ({\n    //         columnDefs: [\n    //             {\n    //                 headerName: 'Make', field: 'make', editable: true, checkboxSelection: true\n    //                 , cellEditor: 'agSelectCellEditor',\n    //                 cellEditorParams: {\n    //                     values: Object.keys(makes)\n    //                 },\n    //                 valueFormatter: function (params) {\n    //                     return makes[params.value];\n    //                 },\n    //                 valueParser: function (params) {\n    //                     return lookupKey(makes, params.newValue);\n    //                 }\n    //             },\n    //             state.columnDefs[1],\n    //             // { headerName: 'Model', field: 'model', editable: true },\n    //             state.columnDefs[2],\n    //             // { headerName: 'Year', field: 'year', editable: true },\n    //             state.columnDefs[3]\n    //             // { headerName: 'Mileage', field: 'mileage', editable: true }\n    //         ]\n    //     }), () => {\n    //         // if (this.state.columnApi !== null) {\n    //         //     this.state.columnApi.resetColumnState();\n    //         // }\n    //     })\n    // }\n\n  }\n\n  componentWillUnmount() {\n    console.log('unmounting...');\n  }\n\n  render() {\n    console.log('render.. ', this.props.cars);\n\n    if (this.state.columnApi !== null) {\n      this.state.columnApi.resetColumnState();\n    }\n\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 380,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.addCar,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 381,\n        columnNumber: 17\n      }\n    }, \"Add new car\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.editCars,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 382,\n        columnNumber: 17\n      }\n    }, \"Edit car with id 1\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.changeColumns,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 383,\n        columnNumber: 17\n      }\n    }, \"Edit column defs\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.onGetSelectedRows,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 384,\n        columnNumber: 17\n      }\n    }, \"Get selected rows\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.onNewRowClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 385,\n        columnNumber: 17\n      }\n    }, \"add new row\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.saveData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 386,\n        columnNumber: 17\n      }\n    }, \"Save Data\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.displayprops,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 387,\n        columnNumber: 17\n      }\n    }, \"display props\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"ag-theme-balham\",\n      style: {\n        height: '200px',\n        width: '800px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 388,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(AgGridReact // reactNext\n    // deltaRowDataMode\n    // getRowNodeId={data => data.transaction_id}\n    , {\n      onGridReady: this.onGridReady,\n      enableSorting: true,\n      columnDefs: this.state.columnDefs // rowData={this.props.cars}\n      ,\n      singleClickEdit: true // allows a single click to enable cell/row editing \n      // deltaRowDataMode={true}\n      // getRowNodeId={this.state.getRowNodeId}\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 390,\n        columnNumber: 21\n      }\n    })));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  cars: state.carReducer.cars\n});\n\nexport default connect(mapStateToProps, {\n  getCars,\n  addCars,\n  editCar,\n  deleteCar\n}, null, {\n  forwardRef: true\n})(Home);\n\nfunction extractValues(mappings) {\n  return Object.keys(mappings);\n}\n\nfunction lookupValue(mappings, key) {\n  return mappings[key];\n}\n\nfunction lookupKey(mappings, name) {\n  for (var key in mappings) {\n    if (mappings.hasOwnProperty(key)) {\n      if (name === mappings[key]) {\n        return key;\n      }\n    }\n  }\n} // let result = Promise.resolve(store.dispatch(addCars(newCar)))\n//     .then(() => { console.log(this.props.cars) })\n// axios.get('http://localhost:8000/api/cars/')\n//   .then((response => {\n//     console.log('response: ', response.data)\n//   }))\n// let response = await fetch('http://localhost:8000/api/cars/');\n// let data = await response.json()\n// console.log('data :', data)\n// state = {\n//     cars: ['cars']\n// }\n// componentDidMount() {\n//     this.props.getCars()\n// }\n// editCars = () => {\n//     const newCar = {\n//         \"make\": \"111\",\n//         \"model\": \"Caravan\",\n//         \"year\": 2000,\n//         \"mileage\": 2000\n//     }\n//     this.props.editCar(80, newCar)\n// }\n// deleteCar = () => {\n//     this.props.deleteCar(2)\n// }\n// dispatchCars = () => {\n//     const newCar = {\n//         \"make\": \"Dodge\",\n//         \"model\": \"Caravan\",\n//         \"year\": 2003,\n//         \"mileage\": 250000\n//     }\n//     this.props.addCars(newCar)\n//     console.log(this.props.cars)\n// }\n// dispatchCars1 = () => {\n//     const newCar = {\n//         \"make\": \"Dodge\",\n//         \"model\": \"Caravan\",\n//         \"year\": 2003,\n//         \"mileage\": 250000\n//     }\n//     store.dispatch(addCars(newCar))\n// }\n// return (\n//     <div>\n//         <p>{this.state.cars}</p>\n//         <p>working</p>\n//         <button onClick={this.dispatchCars}>this.props.addCars(newCar)</button>\n//         <br />\n//         <button onClick={this.dispatchCars1}>store.dispatch(newCar)</button>\n//         <br />\n//         <button onClick={this.editCars}>Edit car with id 2</button>\n//         <br />\n//         <button onClick={this.deleteCar}>Delete car with id2</button>\n//         {\n//             this.props.cars.map(car => {\n//                 return <h1>{car.make}</h1>\n//             })\n//         }\n//     </div >\n// )\n// componentDidUpdate(prevProps, prevState) {\n//     if (this.state.gridApi !== prevState.gridApi) {\n//         console.log('gridApi not undefined: ', this.state.gridApi)\n//     }\n// }\n// GRID IS READY AND THIS.PROPS.DATA IS AVAILABLE.\n// onGridReady = async (params) => {\n//     this.setState({ gridApi: params.api })\n//     this.gridApi = params.api;\n//     this.columnApi = params.columnApi;\n//     console.log('onGrid is ready', this.gridApi, '\\n', this.props.cars)\n//     Promise.resolve(this.props.getCars()).then(() => {\n//         console.log('reaqdyyy: ', this.props.cars)\n//         this.gridApi.setColumnDefs(","map":{"version":3,"sources":["/Users/cp/Documents/gitProject/CARS/frontEnd/carmanager/src/Home.js"],"names":["React","Component","getCars","addCars","editCar","deleteCar","connect","axios","store","AgGridReact","AgGridColumn","_","Home","state","columnDefs","headerName","field","editable","checkboxSelection","rowDataCopy","rowData","gridApi","columnApi","dropDown","getRowNodeId","data","console","log","trade","changeColumns","setState","onNewRowClick","newCar","updateRowData","add","addIndex","startEditingCell","rowIndex","colKey","onGetSelectedRows","e","selectedNodes","getSelectedNodes","getColumnState","resetColumnState","allData","forEachNode","node","push","editCars","props","saveData","dbData","cars","tableData","i","length","dbDataObject","tableDataObject","isEqual","id","trial","displayprops","addCar","Promise","resolve","then","onGridReady","params","api","componentDidMount","makes","reduce","obj","item","Object","assign","make","valueGetter","valueSetter","newValue","valueFormatter","value","JSON","parse","stringify","componentDidUpdate","prevProps","prevState","setRowData","columnState","componentWillUnmount","render","height","width","mapStateToProps","carReducer","forwardRef","extractValues","mappings","keys","lookupValue","key","lookupKey","name","hasOwnProperty"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { getCars, addCars, editCar, deleteCar } from './actions/car';\nimport { connect, } from 'react-redux';\nimport axios from 'axios';\nimport store from './store'\n\nimport { AgGridReact, AgGridColumn } from 'ag-grid-react';\n\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-balham.css';\nimport 'ag-grid-enterprise';\nimport _ from 'lodash';\n\n\nclass Home extends Component {\n\n    state = {\n        columnDefs: [\n            {\n                headerName: 'Make', field: 'make', editable: true, checkboxSelection: true\n\n                // headerName: 'Make', field: 'make', editable: true, checkboxSelection: true, cellEditor: 'agSelectCellEditor',\n                // cellEditorParams: {\n                //     values: Object.keys()\n                // },\n                // valueFormatter: function (params) {\n                //     return lookupValue(carMappings, params.value);\n                // },\n                // valueParser: function (params) {\n                //     return lookupKey(carMappings, params.newValue);\n                // }\n            },\n            { headerName: 'Model', field: 'model', editable: true },\n            { headerName: 'Year', field: 'year', editable: true },\n            { headerName: 'Mileage', field: 'mileage', editable: true }\n        ],\n        rowDataCopy: null,\n        rowData: null,\n        gridApi: {},\n        columnApi: null,\n        dropDown: null,\n        getRowNodeId: function (data) {\n            console.log('data.trade: ', data)\n            return data.trade;\n        }\n    }\n\n    async componentDidMount() {\n        await this.props.getCars();\n        console.log('componentDidmount')\n        // this.setState({ rowData: this.props.cars })\n        const makes = this.props.cars.reduce((obj, item) => Object.assign(obj, { [item.id]: item.make }), {})\n\n        this.setState((state) => ({\n            columnDefs: [\n                {\n                    headerName: 'Make', field: 'make', editable: true, checkboxSelection: true,\n                    // cellEditor: 'agSelectCellEditor',\n\n                    // cellEditorParams: {\n\n                    //     //keys\n                    //     values: Object.keys(makes)\n                    // },\n\n                    valueGetter: function (params) {\n                        console.log('value getter: ', params.node)\n                        return params.node.data.make\n                    },\n\n                    valueSetter: function (params) {\n                        console.log('value setter:')\n                        params.data.make = params.newValue;\n                        return true;\n                    },\n\n                    //displaying values\n                    valueFormatter: function (params) {\n                        // return makes[params.value];\n                        return ('$' + params.value)\n                    },\n\n                    //converting back to keys before saving.\n                    // valueParser: function (params) {\n                    //     return lookupKey(makes, params.newValue);\n                    // }\n                },\n                state.columnDefs[1],\n                // { headerName: 'Model', field: 'model', editable: true },\n\n                state.columnDefs[2],\n                // { headerName: 'Year', field: 'year', editable: true },\n\n                state.columnDefs[3]\n                // { headerName: 'Mileage', field: 'mileage', editable: true }\n            ],\n            // rowData: this.props.cars.concat()\n            rowDataCopy: JSON.parse(JSON.stringify(this.props.cars))\n        }))\n\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (this.state.gridApi !== prevState.gridApi) {\n            console.log('gridApi not undefined: ', this.state.gridApi)\n            this.state.gridApi.setRowData(this.props.cars)\n\n        }\n\n        // if (this.state.columnDefs !== prevState.columnDefs) {\n        //     // console.log('column def has changed')\n\n        // }\n\n        if (this.state.columnApi !== prevState.columnApi) {\n            var columnState = this.state.columnApi.getColumnState();\n            console.log('column def has changed', columnState)\n\n\n\n        }\n\n\n        if (this.props.cars !== prevProps.cars) {\n            console.log('car props CHANGING...')\n            this.setState({\n                rowDataCopy: JSON.parse(JSON.stringify(this.props.cars))\n\n            })\n\n\n        }\n\n\n\n\n\n\n        // if (!_.isEqual(this.props.cars, prevProps.cars)) {\n        //     console.log('column def is being updated')\n\n        //     const makes = this.props.cars.reduce((obj, item) => Object.assign(obj, { [item.id]: item.make }), {})\n\n        //     this.setState((state) => ({\n        //         columnDefs: [\n        //             {\n        //                 headerName: 'Make', field: 'make', editable: true, checkboxSelection: true\n        //                 , cellEditor: 'agSelectCellEditor',\n        //                 cellEditorParams: {\n        //                     values: Object.keys(makes)\n        //                 },\n        //                 valueFormatter: function (params) {\n        //                     return makes[params.value];\n        //                 },\n        //                 valueParser: function (params) {\n        //                     return lookupKey(makes, params.newValue);\n        //                 }\n        //             },\n        //             state.columnDefs[1],\n        //             // { headerName: 'Model', field: 'model', editable: true },\n\n        //             state.columnDefs[2],\n        //             // { headerName: 'Year', field: 'year', editable: true },\n\n        //             state.columnDefs[3]\n        //             // { headerName: 'Mileage', field: 'mileage', editable: true }\n        //         ]\n        //     }), () => {\n        //         // if (this.state.columnApi !== null) {\n        //         //     this.state.columnApi.resetColumnState();\n        //         // }\n\n        //     })\n        // }\n\n\n\n\n\n    }\n\n    componentWillUnmount() {\n        console.log('unmounting...')\n    }\n\n    changeColumns = () => {\n        this.setState({\n            columnDefs: [\n                { headerName: 'Make11', field: 'make', editable: true, checkboxSelection: true },\n                { headerName: 'Model', field: 'model', editable: true },\n                { headerName: 'Year', field: 'year', editable: true },\n                { headerName: 'Mileage', field: 'mileage', editable: true }\n            ]\n        })\n\n    }\n\n    onNewRowClick = () => {\n        const newCar = {\n            \"make\": '',\n            \"model\": '',\n            \"year\": '',\n            \"mileage\": ''\n        }\n\n        this.state.gridApi.updateRowData(\n            { add: [newCar], addIndex: 0 }\n\n        )\n        this.state.gridApi.startEditingCell(\n            {\n                rowIndex: 0,\n                colKey: 'model'\n            })\n        // this.state.gridApi.setFocusedCell(0, \"model\")\n\n\n    }\n\n\n    onGetSelectedRows = e => {\n        const selectedNodes = this.state.gridApi.getSelectedNodes()\n        console.log('selected nodes', selectedNodes)\n        console.log(this.columnApi.getColumnState())\n        this.columnApi.resetColumnState()\n        var allData = [];\n        this.gridApi.forEachNode((node) =>\n            allData.push(node)\n        )\n        console.log('all Data: ', allData)\n    }\n\n    editCars = () => {\n        const newCar = {\n            \"make\": \"WFord\",\n            \"model\": \"Caravan4\",\n            \"year\": 2000,\n            \"mileage\": 2000\n        }\n\n        this.props.editCar(1, newCar)\n    }\n\n    saveData = () => {\n        let dbData = this.props.cars\n        let tableData = []\n        console.log('1')\n        //populating the array with data\n        this.gridApi.forEachNode(node =>\n            tableData.push(node.data)\n\n        )\n        console.log('1')\n\n\n        console.log('tableData : ', tableData)\n        console.log('dbData: ', this.props.cars)\n        console.log('length')\n        var i = 0;\n        for (i; i < this.props.cars.length; i = i + 1) {\n            console.log('Array length: ', this.props.cars.length)\n            console.log('current i: ', i)\n            let dbDataObject = dbData[i];\n            let tableDataObject = tableData[i];\n            console.log('DbDataObject: ', this.props.cars[i], '\\n',\n                'tableDataObject: ', tableDataObject,\n            )\n            if (!_.isEqual(this.state.rowDataCopy, tableDataObject)) {\n                this.props.editCar(tableDataObject.id, tableDataObject);\n\n                console.log('they are different.')\n            }\n            else {\n\n                // }\n            }\n\n\n\n\n        }\n    }\n\n    trial = () => {\n\n    }\n\n    displayprops = () => {\n        console.log('props: ', this.props.cars)\n    }\n\n    addCar = () => {\n        const newCar = {\n            \"make\": \"newCar\",\n            \"model\": \"BMW\",\n            \"year\": 2020,\n            \"mileage\": 2000\n        }\n        Promise.resolve(this.props.addCars(newCar)).then(() =>\n            this.setState({ rowData: this.props.cars }))\n    }\n\n    onGridReady = async (params) => {\n        this.setState({\n            gridApi: params.api,\n            columnApi: params.columnApi\n        })\n\n        this.gridApi = params.api;\n        this.columnApi = params.columnApi;\n\n\n        console.log('onGrid is ready', this.gridApi, '\\n', this.props.cars)\n        // Promise.resolve(this.props.getCars()).then(() => {\n        console.log('reaqdyyy: ', this.props.cars)\n\n\n\n        // this.gridApi.setColumnDefs(\n        //     [\n        //         {\n        //             headerName: 'Make', field: 'make', editable: true, checkboxSelection: true\n        //             // , cellEditor: 'agSelectCellEditor',\n        //             // cellEditorParams: {\n        //             //     values: Object.keys()\n        //             // },\n        //             // valueFormatter: function (params) {\n        //             //     return lookupValue(carMappings, params.value);\n        //             // },\n        //             // valueParser: function (params) {\n        //             //     return lookupKey(carMappings, params.newValue);\n        //             // }\n        //         },\n        //         { headerName: 'Model', field: 'model', editable: true },\n        //         { headerName: 'Year', field: 'year', editable: true },\n        //         { headerName: 'Mileage', field: 'mileage', editable: true }\n        //     ]\n        // )\n\n\n        // })\n        // this.gridApi.setColumnDefs(\n        //     [\n        //         {\n        //             headerName: 'Make', field: 'make', editable: true, checkboxSelection: true\n        //             // , cellEditor: 'agSelectCellEditor',\n        //             // cellEditorParams: {\n        //             //     values: Object.keys()\n        //             // },\n        //             // valueFormatter: function (params) {\n        //             //     return lookupValue(carMappings, params.value);\n        //             // },\n        //             // valueParser: function (params) {\n        //             //     return lookupKey(carMappings, params.newValue);\n        //             // }\n        //         },\n        //         { headerName: 'Model', field: 'model', editable: true },\n        //         { headerName: 'Year', field: 'year', editable: true },\n        //         { headerName: 'Mileage', field: 'mileage', editable: true }\n        //     ]\n        // )\n\n\n\n    }\n\n\n\n\n\n\n    render() {\n        console.log('render.. ', this.props.cars)\n        if (this.state.columnApi !== null) {\n            this.state.columnApi.resetColumnState()\n\n        }\n\n        return (\n            <React.Fragment>\n                <button onClick={this.addCar}>Add new car</button>\n                <button onClick={this.editCars}>Edit car with id 1</button>\n                <button onClick={this.changeColumns}>Edit column defs</button>\n                <button onClick={this.onGetSelectedRows}>Get selected rows</button>\n                <button onClick={this.onNewRowClick}>add new row</button>\n                <button onClick={this.saveData}>Save Data</button>\n                <button onClick={this.displayprops}>display props</button>\n                <div className=\"ag-theme-balham\" style={{ height: '200px', width: '800px' }}>\n\n                    <AgGridReact\n                        // reactNext\n                        // deltaRowDataMode\n                        // getRowNodeId={data => data.transaction_id}\n\n\n\n\n                        onGridReady={this.onGridReady}\n\n                        enableSorting={true}\n                        columnDefs={this.state.columnDefs}\n                        // rowData={this.props.cars}\n                        singleClickEdit={true}   // allows a single click to enable cell/row editing \n                    // deltaRowDataMode={true}\n                    // getRowNodeId={this.state.getRowNodeId}\n\n\n\n                    >\n                        {/* <AgGridColumn headerName='Make' field='make' editable={true} checkboxSelection={true}></AgGridColumn>\n                        <AgGridColumn headerName='Model' field='model' editable={true} ></AgGridColumn>\n                        <AgGridColumn headerName='Year' field='year' editable={true} ></AgGridColumn>\n                        <AgGridColumn headerName='Mileage' field='mileage' editable={true} ></AgGridColumn> */}\n\n\n\n\n\n                    </AgGridReact>\n                </div>\n            </React.Fragment>\n        )\n    }\n}\n\n\n\nconst mapStateToProps = (state) => ({\n    cars: state.carReducer.cars\n});\n\nexport default connect(mapStateToProps,\n    { getCars, addCars, editCar, deleteCar }, null, { forwardRef: true })(Home)\n\n\n\nfunction extractValues(mappings) {\n    return Object.keys(mappings);\n}\nfunction lookupValue(mappings, key) {\n    return mappings[key];\n}\nfunction lookupKey(mappings, name) {\n    for (var key in mappings) {\n        if (mappings.hasOwnProperty(key)) {\n            if (name === mappings[key]) {\n                return key;\n            }\n        }\n    }\n}\n\n\n        // let result = Promise.resolve(store.dispatch(addCars(newCar)))\n        //     .then(() => { console.log(this.props.cars) })\n\n\n    // axios.get('http://localhost:8000/api/cars/')\n    //   .then((response => {\n    //     console.log('response: ', response.data)\n\n    //   }))\n\n    // let response = await fetch('http://localhost:8000/api/cars/');\n    // let data = await response.json()\n    // console.log('data :', data)\n\n\n    // state = {\n    //     cars: ['cars']\n    // }\n\n    // componentDidMount() {\n    //     this.props.getCars()\n    // }\n\n    // editCars = () => {\n    //     const newCar = {\n    //         \"make\": \"111\",\n    //         \"model\": \"Caravan\",\n    //         \"year\": 2000,\n    //         \"mileage\": 2000\n    //     }\n\n    //     this.props.editCar(80, newCar)\n\n\n    // }\n\n    // deleteCar = () => {\n    //     this.props.deleteCar(2)\n\n    // }\n\n    // dispatchCars = () => {\n\n    //     const newCar = {\n    //         \"make\": \"Dodge\",\n    //         \"model\": \"Caravan\",\n    //         \"year\": 2003,\n    //         \"mileage\": 250000\n\n\n    //     }\n\n    //     this.props.addCars(newCar)\n    //     console.log(this.props.cars)\n\n    // }\n\n\n    // dispatchCars1 = () => {\n\n    //     const newCar = {\n    //         \"make\": \"Dodge\",\n    //         \"model\": \"Caravan\",\n    //         \"year\": 2003,\n    //         \"mileage\": 250000\n\n    //     }\n\n\n\n    //     store.dispatch(addCars(newCar))\n\n\n\n    // }\n\n\n\n    // return (\n    //     <div>\n    //         <p>{this.state.cars}</p>\n    //         <p>working</p>\n    //         <button onClick={this.dispatchCars}>this.props.addCars(newCar)</button>\n    //         <br />\n    //         <button onClick={this.dispatchCars1}>store.dispatch(newCar)</button>\n    //         <br />\n    //         <button onClick={this.editCars}>Edit car with id 2</button>\n    //         <br />\n    //         <button onClick={this.deleteCar}>Delete car with id2</button>\n\n\n    //         {\n    //             this.props.cars.map(car => {\n    //                 return <h1>{car.make}</h1>\n    //             })\n    //         }\n\n    //     </div >\n    // )\n\n      // componentDidUpdate(prevProps, prevState) {\n    //     if (this.state.gridApi !== prevState.gridApi) {\n    //         console.log('gridApi not undefined: ', this.state.gridApi)\n    //     }\n    // }\n\n\n\n\n// GRID IS READY AND THIS.PROPS.DATA IS AVAILABLE.\n\n    // onGridReady = async (params) => {\n    //     this.setState({ gridApi: params.api })\n    //     this.gridApi = params.api;\n    //     this.columnApi = params.columnApi;\n    //     console.log('onGrid is ready', this.gridApi, '\\n', this.props.cars)\n    //     Promise.resolve(this.props.getCars()).then(() => {\n    //         console.log('reaqdyyy: ', this.props.cars)\n    //         this.gridApi.setColumnDefs("]},"metadata":{},"sourceType":"module"}