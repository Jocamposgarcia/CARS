{"ast":null,"code":"var _jsxFileName = \"/Users/cp/Documents/gitProject/CARS/frontEnd/carmanager/src/Home.js\";\nimport React, { Component } from 'react';\nimport { getCars, addCars, editCar, deleteCar } from './actions/car';\nimport { connect } from 'react-redux';\nimport axios from 'axios';\nimport store from './store';\nimport { AgGridReact, AgGridColumn } from 'ag-grid-react';\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-balham.css';\nimport 'ag-grid-enterprise';\nimport _ from 'lodash';\nimport DeleteSharpIcon from '@material-ui/icons/DeleteSharp';\nimport IconButton from '@material-ui/core/IconButton';\nimport SaveIcon from '@material-ui/icons/Save';\nimport AddIcon from '@material-ui/icons/Add';\n\nclass Home extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      defaultColDef: {\n        enableCellChangeFlash: true,\n        cellClass: 'align-right'\n      },\n      columnDefs: [{\n        headerName: 'Make',\n        field: 'make',\n        editable: true,\n        checkboxSelection: true // sort: 'asc'\n        // headerName: 'Make', field: 'make', editable: true, checkboxSelection: true, cellEditor: 'agSelectCellEditor',\n        // cellEditorParams: {\n        //     values: Object.keys()\n        // },\n        // valueFormatter: function (params) {\n        //     return lookupValue(carMappings, params.value);\n        // },\n        // valueParser: function (params) {\n        //     return lookupKey(carMappings, params.newValue);\n        // }\n\n      }, {\n        headerName: 'Model',\n        field: 'model',\n        editable: true,\n        valueSetter: params => {\n          params.data.model = params.newValue;\n          this.gridApi.flashCells({\n            rowNodes: [params.node],\n            columns: [params.column.colId]\n          });\n        }\n      }, {\n        headerName: 'Year',\n        field: 'year',\n        editable: true,\n        valueSetter: params => {\n          params.data.year = params.newValue;\n          this.gridApi.flashCells({\n            rowNodes: [params.node],\n            columns: [params.column.colId]\n          });\n        }\n      }, {\n        headerName: 'Mileage',\n        field: 'mileage',\n        editable: true,\n        valueSetter: params => {\n          params.data.mileage = params.newValue;\n          this.gridApi.flashCells({\n            rowNodes: [params.node],\n            columns: [params.column.colId]\n          });\n        }\n      }],\n      isSaveButtonDisabled: true,\n      isDeleteButtonDisabled: true,\n      modifiedRowsCount: 0,\n      rowDataCopy: null,\n      rowData: null,\n      gridApi: {},\n      columnApi: null,\n      dropDown: null,\n      getRowNodeId: function (data) {\n        console.log('data.trade: ', data);\n        return data.trade;\n      }\n    };\n\n    this.changeColumns = () => {\n      this.setState({\n        columnDefs: [{\n          headerName: 'Make11',\n          field: 'make',\n          editable: true,\n          checkboxSelection: true\n        }, {\n          headerName: 'Model',\n          field: 'model',\n          editable: true\n        }, {\n          headerName: 'Year',\n          field: 'year',\n          editable: true\n        }, {\n          headerName: 'Mileage',\n          field: 'mileage',\n          editable: true\n        }]\n      });\n    };\n\n    this.onNewRowClick = () => {\n      const newCar = {\n        \"make\": '',\n        \"model\": '',\n        \"year\": '',\n        \"mileage\": ''\n      };\n      console.log('displayedRowCount: ', this.state.gridApi.getDisplayedRowCount());\n      this.state.gridApi.updateRowData({\n        add: [newCar],\n        addIndex: this.state.gridApi.getDisplayedRowCount()\n      });\n      this.state.gridApi.startEditingCell({\n        rowIndex: this.state.columnApi.g,\n        colKey: 'make'\n      }); // this.state.gridApi.setFocusedCell(0, \"model\")\n\n      this.setState({\n        isSaveButtonDisabled: false\n      });\n    };\n\n    this.onGetSelectedRows = e => {\n      const selectedNodes = this.state.gridApi.getSelectedNodes();\n      console.log('selected nodes', selectedNodes);\n      console.log(this.columnApi.getColumnState());\n      this.columnApi.resetColumnState();\n      var allData = [];\n      this.gridApi.forEachNode(node => allData.push(node));\n      console.log('all Data: ', allData);\n      console.log('column state: ', this.columnApi.getColumnState());\n    };\n\n    this.editCars = () => {\n      const newCar = {\n        \"make\": \"WFord\",\n        \"model\": \"Caravan4\",\n        \"year\": 2000,\n        \"mileage\": 2000\n      };\n      this.props.editCar(1, newCar);\n    };\n\n    this.saveData = () => {\n      this.setState({\n        isSaveButtonDisabled: true\n      });\n      let dbData = this.props.cars;\n      let tableData = [];\n      console.log('1'); //populating the array with data\n\n      this.gridApi.forEachNode(node => tableData.push(node.data));\n      console.log('tableDataLength: ', tableData.length);\n      console.log('dbDataLength: ', this.state.rowDataCopy.length);\n      var i = 0;\n\n      for (i; i < this.state.rowDataCopy.length; i = i + 1) {\n        console.log('current i: ', i);\n        let dbDataObject = this.state.rowDataCopy[i];\n        let tableDataObject = tableData[i];\n        console.log('DbDataObject: ', dbDataObject, '\\n', 'tableDataObject: ', tableDataObject);\n\n        if (!_.isEqual(dbDataObject, tableDataObject)) {\n          this.props.editCar(tableDataObject.id, tableDataObject);\n          console.log('they are different.');\n        }\n      }\n\n      if (tableData.length > this.state.rowDataCopy.length) {\n        let numberOfnewRows = tableData.length - this.state.rowDataCopy.length;\n        console.log('number of new Rows: ', numberOfnewRows);\n        console.log('this.props.cars: ', this.props.cars);\n        var i = 0;\n\n        for (i; i < numberOfnewRows; i = i + 1) {\n          console.log('row: ', tableData[tableData.length - numberOfnewRows + i]);\n          console.log('key: ', tableData.length - numberOfnewRows + i);\n          this.props.addCars(tableData[tableData.length - numberOfnewRows + i]);\n        }\n      }\n\n      this.gridApi.deselectAll();\n    };\n\n    this.deleteRow = () => {\n      this.state.gridApi.getSelectedNodes().map(node => this.props.deleteCar(node.data.id));\n      this.setState({\n        isDeleteButtonDisabled: true\n      });\n    };\n\n    this.onSelectionChanged = () => {\n      this.state.gridApi.getSelectedNodes();\n    };\n\n    this.displayprops = () => {\n      console.log('props: ', this.props.cars);\n    };\n\n    this.addCar = () => {\n      const newCar = {\n        \"make\": \"newCar\",\n        \"model\": \"BMW\",\n        \"year\": 2020,\n        \"mileage\": 2000\n      };\n      Promise.resolve(this.props.addCars(newCar)).then(() => this.setState({\n        rowData: this.props.cars\n      }));\n    };\n\n    this.onGridReady = async params => {\n      this.setState({\n        gridApi: params.api,\n        columnApi: params.columnApi\n      });\n      this.gridApi = params.api;\n      this.columnApi = params.columnApi;\n      console.log('onGrid is ready', this.gridApi, '\\n', this.props.cars);\n\n      if (this.props.cars === undefined) {\n        await store.dispatch(getCars());\n      }\n\n      console.log('reaqdyyy: ', this.props.cars);\n      const modelColumn = { ...this.state.columnDefs[1]\n      }; // const yearColumn = JSON.parse(JSON.stringify(this.state.columnDefs[2]))\n\n      const yearColumn = { ...this.state.columnDefs[2]\n      };\n      const mileageColumn = { ...this.state.columnDefs[3]\n      };\n      const makes = this.props.cars.reduce((obj, item) => Object.assign(obj, {\n        [item.id]: item.make\n      }), {}); // this.gridApi.setColumnDefs(\n\n      this.setState({\n        columnDefs: [{\n          headerName: 'Make',\n          field: 'make',\n          editable: true,\n          checkboxSelection: true,\n          sort: 'asc',\n          // cellEditor: 'agSelectCellEditor',\n          // cellEditorParams: {\n          //     //keys\n          //     values: Object.keys(makes)\n          // },\n          valueGetter: function (params) {\n            console.log('value getter: ', params.node);\n            return params.node.data.make;\n          },\n          valueSetter: params => {\n            console.log('params: ', params);\n            console.log('params.coldef.field: ', params.colDef.field);\n            this.gridApi.flashCells({\n              rowNodes: [params.node],\n              columns: ['make_1']\n            });\n            params.data.make = params.newValue;\n            const tableData = [];\n            let count = 0;\n            this.gridApi.forEachNode(node => tableData.push(node.data));\n            console.log('value setter:');\n\n            if (tableData.length === this.state.rowDataCopy.length) {\n              console.log('equal: true');\n              this.gridApi.forEachNode(node => {\n                console.log('node.rowIndex: ', node.rowIndex);\n                console.log('tableData: ', node.data.make, '\\n', 'dbData :', this.state.rowDataCopy[node.rowIndex].make);\n                this.state.rowDataCopy.map(dbRow => {\n                  if (dbRow.id === node.data.id) {\n                    if (node.data.make !== dbRow.make) {\n                      count += 1;\n                    }\n\n                    if (count > 0) {\n                      this.setState({\n                        isSaveButtonDisabled: false\n                      });\n                    } else {\n                      this.setState({\n                        isSaveButtonDisabled: true\n                      });\n                    }\n                  }\n                });\n              });\n            } else {\n              this.setState({\n                isSaveButtonDisabled: false\n              });\n            } // var x = 0;\n            // for (x; x < this.state.rowDataCopy.length; x = x + 1) {\n            //     console.log('tableData: ', tableData[x].make, '\\n', 'rowData :', this.state.rowDataCopy[x].make)\n            //     if (this.state.rowDataCopy[x].make !== tableData[x].make) {\n            //         count += 1\n            //     }\n            //     else {\n            //         // this.setState({ isSaveButtonDisabled: true })\n            //     }\n            //     if (count > 0) {\n            //         this.setState({ isSaveButtonDisabled: false })\n            //     }\n            //     else {\n            //         this.setState({ isSaveButtonDisabled: true })\n            //     }\n            // }\n\n\n            if (params.newValue !== params.oldvalue) {\n              return true;\n            }\n          } // displaying values\n          // valueFormatter: function (params) {\n          //     return makes[params.value];\n          //     // return ('$' + params.value)\n          // },\n          // converting back to keys before saving.\n          // valueParser: function (params) {\n          //     return lookupKey(makes, params.newValue);\n          // }\n\n        }, modelColumn, yearColumn, mileageColumn // this.state.columnDefs[1], this.state.columnDefs[2], this.state.columnDefs[3]\n        //     // { headerName: 'Model', field: 'model', editable: true },\n        //     // { headerName: 'Year', field: 'year', editable: true },\n        // { headerName: 'Model', field: 'model', editable: true },\n        // { headerName: 'Year', field: 'year', editable: true },\n        // { headerName: 'Mileage', field: 'mileage', editable: true }\n        ]\n      });\n      this.setState(state => ({\n        defaultColDef: state.defaultColDef\n      })); // })\n      // this.gridApi.setColumnDefs(\n      //     [\n      //         {\n      //             headerName: 'Make', field: 'make', editable: true, checkboxSelection: true\n      //             // , cellEditor: 'agSelectCellEditor',\n      //             // cellEditorParams: {\n      //             //     values: Object.keys()\n      //             // },\n      //             // valueFormatter: function (params) {\n      //             //     return lookupValue(carMappings, params.value);\n      //             // },\n      //             // valueParser: function (params) {\n      //             //     return lookupKey(carMappings, params.newValue);\n      //             // }\n      //         },\n      //         { headerName: 'Model', field: 'model', editable: true },\n      //         { headerName: 'Year', field: 'year', editable: true },\n      //         { headerName: 'Mileage', field: 'mileage', editable: true }\n      //     ]\n      // )\n    };\n\n    this.displayCopy = () => {\n      var array = [];\n      this.state.gridApi.forEachNode(node => array.push(node));\n      console.log('Db data: ', this.state.rowDataCopy);\n      console.log('table Data: ', array);\n      console.log('displayed rows count: ', this.gridApi.getDisplayedRowCount());\n      var rowNode = this.gridApi.getDisplayedRowAtIndex(0);\n      this.gridApi.flashCells({\n        rowNodes: [rowNode]\n      });\n    };\n\n    this.rowSelected = () => {\n      if (this.gridApi.getSelectedNodes().length > 0) {\n        this.setState({\n          isDeleteButtonDisabled: false\n        });\n      } else {\n        this.setState({\n          isDeleteButtonDisabled: true\n        });\n      } // //unselected\n      // if (this.gridApi.getSelectedNodes() < 1) {\n      //     console.log('row has been unselelected')\n      // }\n      // //selected\n      // else {\n      //     console.log('selected')\n      // }\n\n    };\n  }\n\n  async componentDidMount() {\n    Promise.resolve(this.props.getCars()).then(() => {\n      // const makes = this.props.cars.reduce((obj, item) => Object.assign(obj, { [item.id]: item.make }), {})\n      // this.gridApi.setColumnDefs([\n      //     {\n      //         headerName: 'Make', field: 'make', editable: true, checkboxSelection: true,\n      //         cellEditor: 'agSelectCellEditor',\n      //         cellEditorParams: {\n      //             //keys\n      //             values: Object.keys(makes)\n      //         },\n      //         valueGetter: function (params) {\n      //             console.log('value getter: ', params.node)\n      //             return params.node.data.make\n      //         },\n      //         valueSetter: function (params) {\n      //             console.log('value setter:')\n      //             params.data.make = params.newValue;\n      //             return true;\n      //         },\n      //         // displaying values\n      //         valueFormatter: function (params) {\n      //             return makes[params.value];\n      //             return ('$' + params.value)\n      //         },\n      //         // converting back to keys before saving.\n      //         valueParser: function (params) {\n      //             return lookupKey(makes, params.newValue);\n      //         }\n      //     },\n      //     this.state.columnDefs[1],\n      //     // { headerName: 'Model', field: 'model', editable: true },\n      //     this.state.columnDefs[2],\n      //     // { headerName: 'Year', field: 'year', editable: true },\n      //     this.state.columnDefs[3]\n      //     // { headerName: 'Mileage', field: 'mileage', editable: true }\n      // ])\n      this.setState(state => ({\n        // columnDefs: [\n        //     {\n        //         headerName: 'Make', field: 'make', editable: true, checkboxSelection: true,\n        //         cellEditor: 'agSelectCellEditor',\n        //         cellEditorParams: {\n        //             //keys\n        //             values: Object.keys(makes)\n        //         },\n        //         valueGetter: function (params) {\n        //             console.log('value getter: ', params.node)\n        //             return params.node.data.make\n        //         },\n        //         valueSetter: function (params) {\n        //             console.log('value setter:')\n        //             params.data.make = params.newValue;\n        //             return true;\n        //         },\n        //         displaying values\n        //         valueFormatter: function (params) {\n        //             return makes[params.value];\n        //             return ('$' + params.value)\n        //         },\n        //         converting back to keys before saving.\n        //         valueParser: function (params) {\n        //             return lookupKey(makes, params.newValue);\n        //         }\n        //     },\n        //     state.columnDefs[1],\n        //     { headerName: 'Model', field: 'model', editable: true },\n        //     state.columnDefs[2],\n        //     { headerName: 'Year', field: 'year', editable: true },\n        //     state.columnDefs[3]\n        //     { headerName: 'Mileage', field: 'mileage', editable: true }\n        // ],\n        // rowData: this.props.cars.concat()\n        rowDataCopy: JSON.parse(JSON.stringify(this.props.cars))\n      }));\n    });\n    console.log('componentDidmount'); // this.setState({ rowData: this.props.cars })\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.state.gridApi !== prevState.gridApi) {\n      console.log('gridApi not undefined: ', this.state.gridApi); // this.state.gridApi.setRowData(this.props.cars)\n    } // if (this.state.columnDefs !== prevState.columnDefs) {\n    //     // console.log('column def has changed')\n    // }\n\n\n    if (this.state.columnApi !== prevState.columnApi) {\n      var columnState = this.state.columnApi.getColumnState();\n      console.log('column def has changed', columnState);\n    }\n\n    if (this.props.cars !== prevProps.cars) {\n      console.log('car props CHANGING...');\n      this.setState({\n        rowDataCopy: JSON.parse(JSON.stringify(this.props.cars))\n      });\n    } // if (!_.isEqual(this.props.cars, prevProps.cars)) {\n    //     console.log('column def is being updated')\n    //     const makes = this.props.cars.reduce((obj, item) => Object.assign(obj, { [item.id]: item.make }), {})\n    //     this.setState((state) => ({\n    //         columnDefs: [\n    //             {\n    //                 headerName: 'Make', field: 'make', editable: true, checkboxSelection: true\n    //                 , cellEditor: 'agSelectCellEditor',\n    //                 cellEditorParams: {\n    //                     values: Object.keys(makes)\n    //                 },\n    //                 valueFormatter: function (params) {\n    //                     return makes[params.value];\n    //                 },\n    //                 valueParser: function (params) {\n    //                     return lookupKey(makes, params.newValue);\n    //                 }\n    //             },\n    //             state.columnDefs[1],\n    //             // { headerName: 'Model', field: 'model', editable: true },\n    //             state.columnDefs[2],\n    //             // { headerName: 'Year', field: 'year', editable: true },\n    //             state.columnDefs[3]\n    //             // { headerName: 'Mileage', field: 'mileage', editable: true }\n    //         ]\n    //     }), () => {\n    //         // if (this.state.columnApi !== null) {\n    //         //     this.state.columnApi.resetColumnState();\n    //         // }\n    //     })\n    // }\n\n  }\n\n  componentWillUnmount() {\n    console.log('unmounting...');\n  }\n\n  render() {\n    console.log('render.. ', this.props.cars);\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 663,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(IconButton, {\n      onClick: this.onNewRowClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 664,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(AddIcon, {\n      color: \"secondary\",\n      style: {\n        fontSize: 35\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 665,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(IconButton, {\n      onClick: this.saveData,\n      disabled: this.state.isSaveButtonDisabled,\n      color: \"secondary\",\n      style: {\n        fontSize: 35\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 668,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(SaveIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 669,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(IconButton, {\n      onClick: this.deleteRow,\n      disabled: this.state.isDeleteButtonDisabled,\n      color: \"secondary\",\n      style: {\n        fontSize: 35\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 672,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(DeleteSharpIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 673,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.addCar,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 676,\n        columnNumber: 17\n      }\n    }, \"Add new car\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.editCars,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 677,\n        columnNumber: 17\n      }\n    }, \"Edit car with id 1\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.changeColumns,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 678,\n        columnNumber: 17\n      }\n    }, \"Edit column defs\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.onGetSelectedRows,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 679,\n        columnNumber: 17\n      }\n    }, \"Get selected rows\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.onNewRowClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 680,\n        columnNumber: 17\n      }\n    }, \"add new row\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.displayprops,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 681,\n        columnNumber: 17\n      }\n    }, \"display props\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.displayCopy,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 682,\n        columnNumber: 17\n      }\n    }, \" display\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"ag-theme-balham\",\n      style: {\n        height: '100%',\n        width: '810px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 684,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(AgGridReact // reactNext\n    // deltaRowDataMode\n    // getRowNodeId={data => data.transaction_id}\n    , {\n      onGridReady: this.onGridReady // onRowSelected={this.rowSelected}\n      ,\n      onSelectionChanged: this.rowSelected,\n      enableSorting: true,\n      columnDefs: this.state.columnDefs,\n      rowData: this.props.cars,\n      singleClickEdit: true // allows a single click to enable cell/row editing\n      ,\n      rowSelection: \"multiple\",\n      domLayout: \"autoHeight\",\n      defaultColDef: this.state.defaultColDef // deltaRowDataMode={true}\n      // getRowNodeId={this.state.getRowNodeId}\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 686,\n        columnNumber: 21\n      }\n    })));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  cars: state.carReducer.cars\n});\n\nexport default connect(mapStateToProps, {\n  getCars,\n  addCars,\n  editCar,\n  deleteCar\n}, null, {\n  forwardRef: true\n})(Home);\n\nfunction extractValues(mappings) {\n  return Object.keys(mappings);\n}\n\nfunction lookupValue(mappings, key) {\n  return mappings[key];\n}\n\nfunction lookupKey(mappings, name) {\n  for (var key in mappings) {\n    if (mappings.hasOwnProperty(key)) {\n      if (name === mappings[key]) {\n        return key;\n      }\n    }\n  }\n} // let result = Promise.resolve(store.dispatch(addCars(newCar)))\n//     .then(() => { console.log(this.props.cars) })\n// axios.get('http://localhost:8000/api/cars/')\n//   .then((response => {\n//     console.log('response: ', response.data)\n//   }))\n// let response = await fetch('http://localhost:8000/api/cars/');\n// let data = await response.json()\n// console.log('data :', data)\n// state = {\n//     cars: ['cars']\n// }\n// componentDidMount() {\n//     this.props.getCars()\n// }\n// editCars = () => {\n//     const newCar = {\n//         \"make\": \"111\",\n//         \"model\": \"Caravan\",\n//         \"year\": 2000,\n//         \"mileage\": 2000\n//     }\n//     this.props.editCar(80, newCar)\n// }\n// deleteCar = () => {\n//     this.props.deleteCar(2)\n// }\n// dispatchCars = () => {\n//     const newCar = {\n//         \"make\": \"Dodge\",\n//         \"model\": \"Caravan\",\n//         \"year\": 2003,\n//         \"mileage\": 250000\n//     }\n//     this.props.addCars(newCar)\n//     console.log(this.props.cars)\n// }\n// dispatchCars1 = () => {\n//     const newCar = {\n//         \"make\": \"Dodge\",\n//         \"model\": \"Caravan\",\n//         \"year\": 2003,\n//         \"mileage\": 250000\n//     }\n//     store.dispatch(addCars(newCar))\n// }\n// return (\n//     <div>\n//         <p>{this.state.cars}</p>\n//         <p>working</p>\n//         <button onClick={this.dispatchCars}>this.props.addCars(newCar)</button>\n//         <br />\n//         <button onClick={this.dispatchCars1}>store.dispatch(newCar)</button>\n//         <br />\n//         <button onClick={this.editCars}>Edit car with id 2</button>\n//         <br />\n//         <button onClick={this.deleteCar}>Delete car with id2</button>\n//         {\n//             this.props.cars.map(car => {\n//                 return <h1>{car.make}</h1>\n//             })\n//         }\n//     </div >\n// )\n// componentDidUpdate(prevProps, prevState) {\n//     if (this.state.gridApi !== prevState.gridApi) {\n//         console.log('gridApi not undefined: ', this.state.gridApi)\n//     }\n// }\n// GRID IS READY AND THIS.PROPS.DATA IS AVAILABLE.\n// onGridReady = async (params) => {\n//     this.setState({ gridApi: params.api })\n//     this.gridApi = params.api;\n//     this.columnApi = params.columnApi;\n//     console.log('onGrid is ready', this.gridApi, '\\n', this.props.cars)\n//     Promise.resolve(this.props.getCars()).then(() => {\n//         console.log('reaqdyyy: ', this.props.cars)\n//         this.gridApi.setColumnDefs(","map":{"version":3,"sources":["/Users/cp/Documents/gitProject/CARS/frontEnd/carmanager/src/Home.js"],"names":["React","Component","getCars","addCars","editCar","deleteCar","connect","axios","store","AgGridReact","AgGridColumn","_","DeleteSharpIcon","IconButton","SaveIcon","AddIcon","Home","state","defaultColDef","enableCellChangeFlash","cellClass","columnDefs","headerName","field","editable","checkboxSelection","valueSetter","params","data","model","newValue","gridApi","flashCells","rowNodes","node","columns","column","colId","year","mileage","isSaveButtonDisabled","isDeleteButtonDisabled","modifiedRowsCount","rowDataCopy","rowData","columnApi","dropDown","getRowNodeId","console","log","trade","changeColumns","setState","onNewRowClick","newCar","getDisplayedRowCount","updateRowData","add","addIndex","startEditingCell","rowIndex","g","colKey","onGetSelectedRows","e","selectedNodes","getSelectedNodes","getColumnState","resetColumnState","allData","forEachNode","push","editCars","props","saveData","dbData","cars","tableData","length","i","dbDataObject","tableDataObject","isEqual","id","numberOfnewRows","deselectAll","deleteRow","map","onSelectionChanged","displayprops","addCar","Promise","resolve","then","onGridReady","api","undefined","dispatch","modelColumn","yearColumn","mileageColumn","makes","reduce","obj","item","Object","assign","make","sort","valueGetter","colDef","count","dbRow","oldvalue","displayCopy","array","rowNode","getDisplayedRowAtIndex","rowSelected","componentDidMount","JSON","parse","stringify","componentDidUpdate","prevProps","prevState","columnState","componentWillUnmount","render","fontSize","height","width","mapStateToProps","carReducer","forwardRef","extractValues","mappings","keys","lookupValue","key","lookupKey","name","hasOwnProperty"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { getCars, addCars, editCar, deleteCar } from './actions/car';\nimport { connect, } from 'react-redux';\nimport axios from 'axios';\nimport store from './store'\n\nimport { AgGridReact, AgGridColumn } from 'ag-grid-react';\n\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-balham.css';\nimport 'ag-grid-enterprise';\nimport _ from 'lodash';\nimport DeleteSharpIcon from '@material-ui/icons/DeleteSharp';\nimport IconButton from '@material-ui/core/IconButton';\nimport SaveIcon from '@material-ui/icons/Save';\nimport AddIcon from '@material-ui/icons/Add';\n\n\n\n\n\n\n\nclass Home extends Component {\n\n    state = {\n        defaultColDef: {\n            enableCellChangeFlash: true, cellClass: 'align-right',\n        },\n        columnDefs: [\n            {\n                headerName: 'Make', field: 'make', editable: true, checkboxSelection: true,\n                // sort: 'asc'\n\n                // headerName: 'Make', field: 'make', editable: true, checkboxSelection: true, cellEditor: 'agSelectCellEditor',\n                // cellEditorParams: {\n                //     values: Object.keys()\n                // },\n                // valueFormatter: function (params) {\n                //     return lookupValue(carMappings, params.value);\n                // },\n                // valueParser: function (params) {\n                //     return lookupKey(carMappings, params.newValue);\n                // }\n            },\n            {\n                headerName: 'Model', field: 'model', editable: true,\n                valueSetter: (params) => {\n\n                    params.data.model = params.newValue;\n\n                    this.gridApi.flashCells({\n                        rowNodes: [params.node],\n                        columns: [params.column.colId]\n                    });\n\n                }\n            },\n            {\n                headerName: 'Year', field: 'year', editable: true,\n\n                valueSetter: (params) => {\n\n                    params.data.year = params.newValue;\n\n                    this.gridApi.flashCells({\n                        rowNodes: [params.node],\n                        columns: [params.column.colId]\n                    });\n\n                }\n            },\n            {\n                headerName: 'Mileage', field: 'mileage', editable: true,\n                valueSetter: (params) => {\n\n                    params.data.mileage = params.newValue;\n\n                    this.gridApi.flashCells({\n                        rowNodes: [params.node],\n                        columns: [params.column.colId]\n                    });\n\n                }\n            }\n        ],\n        isSaveButtonDisabled: true,\n        isDeleteButtonDisabled: true,\n        modifiedRowsCount: 0,\n        rowDataCopy: null,\n        rowData: null,\n        gridApi: {},\n        columnApi: null,\n        dropDown: null,\n        getRowNodeId: function (data) {\n            console.log('data.trade: ', data)\n            return data.trade;\n        }\n    }\n\n    async componentDidMount() {\n        Promise.resolve(this.props.getCars()).then(() => {\n\n\n\n            // const makes = this.props.cars.reduce((obj, item) => Object.assign(obj, { [item.id]: item.make }), {})\n\n            // this.gridApi.setColumnDefs([\n            //     {\n            //         headerName: 'Make', field: 'make', editable: true, checkboxSelection: true,\n            //         cellEditor: 'agSelectCellEditor',\n\n            //         cellEditorParams: {\n\n            //             //keys\n            //             values: Object.keys(makes)\n            //         },\n\n            //         valueGetter: function (params) {\n            //             console.log('value getter: ', params.node)\n            //             return params.node.data.make\n            //         },\n\n            //         valueSetter: function (params) {\n            //             console.log('value setter:')\n            //             params.data.make = params.newValue;\n            //             return true;\n            //         },\n\n            //         // displaying values\n            //         valueFormatter: function (params) {\n            //             return makes[params.value];\n            //             return ('$' + params.value)\n            //         },\n\n            //         // converting back to keys before saving.\n            //         valueParser: function (params) {\n            //             return lookupKey(makes, params.newValue);\n            //         }\n            //     },\n            //     this.state.columnDefs[1],\n            //     // { headerName: 'Model', field: 'model', editable: true },\n\n            //     this.state.columnDefs[2],\n            //     // { headerName: 'Year', field: 'year', editable: true },\n\n            //     this.state.columnDefs[3]\n            //     // { headerName: 'Mileage', field: 'mileage', editable: true }\n            // ])\n\n            this.setState((state) => ({\n\n                // columnDefs: [\n                //     {\n                //         headerName: 'Make', field: 'make', editable: true, checkboxSelection: true,\n                //         cellEditor: 'agSelectCellEditor',\n\n                //         cellEditorParams: {\n\n                //             //keys\n                //             values: Object.keys(makes)\n                //         },\n\n                //         valueGetter: function (params) {\n                //             console.log('value getter: ', params.node)\n                //             return params.node.data.make\n                //         },\n\n                //         valueSetter: function (params) {\n                //             console.log('value setter:')\n                //             params.data.make = params.newValue;\n                //             return true;\n                //         },\n\n                //         displaying values\n                //         valueFormatter: function (params) {\n                //             return makes[params.value];\n                //             return ('$' + params.value)\n                //         },\n\n                //         converting back to keys before saving.\n                //         valueParser: function (params) {\n                //             return lookupKey(makes, params.newValue);\n                //         }\n                //     },\n                //     state.columnDefs[1],\n                //     { headerName: 'Model', field: 'model', editable: true },\n\n                //     state.columnDefs[2],\n                //     { headerName: 'Year', field: 'year', editable: true },\n\n                //     state.columnDefs[3]\n                //     { headerName: 'Mileage', field: 'mileage', editable: true }\n                // ],\n                // rowData: this.props.cars.concat()\n                rowDataCopy: JSON.parse(JSON.stringify(this.props.cars))\n            }))\n\n\n        })\n        console.log('componentDidmount')\n        // this.setState({ rowData: this.props.cars })\n\n\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (this.state.gridApi !== prevState.gridApi) {\n            console.log('gridApi not undefined: ', this.state.gridApi)\n            // this.state.gridApi.setRowData(this.props.cars)\n\n        }\n\n        // if (this.state.columnDefs !== prevState.columnDefs) {\n        //     // console.log('column def has changed')\n\n        // }\n\n        if (this.state.columnApi !== prevState.columnApi) {\n            var columnState = this.state.columnApi.getColumnState();\n            console.log('column def has changed', columnState)\n\n\n\n        }\n\n\n        if (this.props.cars !== prevProps.cars) {\n            console.log('car props CHANGING...')\n            this.setState({\n                rowDataCopy: JSON.parse(JSON.stringify(this.props.cars))\n\n            })\n\n\n        }\n\n\n\n\n\n\n        // if (!_.isEqual(this.props.cars, prevProps.cars)) {\n        //     console.log('column def is being updated')\n\n        //     const makes = this.props.cars.reduce((obj, item) => Object.assign(obj, { [item.id]: item.make }), {})\n\n        //     this.setState((state) => ({\n        //         columnDefs: [\n        //             {\n        //                 headerName: 'Make', field: 'make', editable: true, checkboxSelection: true\n        //                 , cellEditor: 'agSelectCellEditor',\n        //                 cellEditorParams: {\n        //                     values: Object.keys(makes)\n        //                 },\n        //                 valueFormatter: function (params) {\n        //                     return makes[params.value];\n        //                 },\n        //                 valueParser: function (params) {\n        //                     return lookupKey(makes, params.newValue);\n        //                 }\n        //             },\n        //             state.columnDefs[1],\n        //             // { headerName: 'Model', field: 'model', editable: true },\n\n        //             state.columnDefs[2],\n        //             // { headerName: 'Year', field: 'year', editable: true },\n\n        //             state.columnDefs[3]\n        //             // { headerName: 'Mileage', field: 'mileage', editable: true }\n        //         ]\n        //     }), () => {\n        //         // if (this.state.columnApi !== null) {\n        //         //     this.state.columnApi.resetColumnState();\n        //         // }\n\n        //     })\n        // }\n\n\n\n\n\n    }\n\n    componentWillUnmount() {\n        console.log('unmounting...')\n    }\n\n    changeColumns = () => {\n        this.setState({\n            columnDefs: [\n                { headerName: 'Make11', field: 'make', editable: true, checkboxSelection: true },\n                { headerName: 'Model', field: 'model', editable: true },\n                { headerName: 'Year', field: 'year', editable: true },\n                { headerName: 'Mileage', field: 'mileage', editable: true }\n            ]\n        })\n\n    }\n\n    onNewRowClick = () => {\n        const newCar = {\n            \"make\": '',\n            \"model\": '',\n            \"year\": '',\n            \"mileage\": ''\n        }\n        console.log('displayedRowCount: ', this.state.gridApi.getDisplayedRowCount())\n\n        this.state.gridApi.updateRowData(\n            { add: [newCar], addIndex: this.state.gridApi.getDisplayedRowCount() }\n\n        )\n        this.state.gridApi.startEditingCell(\n            {\n                rowIndex: this.state.columnApi.g,\n                colKey: 'make'\n            })\n        // this.state.gridApi.setFocusedCell(0, \"model\")\n        this.setState({ isSaveButtonDisabled: false })\n\n    }\n\n\n    onGetSelectedRows = e => {\n        const selectedNodes = this.state.gridApi.getSelectedNodes()\n        console.log('selected nodes', selectedNodes)\n        console.log(this.columnApi.getColumnState())\n        this.columnApi.resetColumnState()\n        var allData = [];\n        this.gridApi.forEachNode((node) =>\n            allData.push(node)\n        )\n        console.log('all Data: ', allData)\n\n        console.log('column state: ', this.columnApi.getColumnState())\n    }\n\n    editCars = () => {\n        const newCar = {\n            \"make\": \"WFord\",\n            \"model\": \"Caravan4\",\n            \"year\": 2000,\n            \"mileage\": 2000\n        }\n\n        this.props.editCar(1, newCar)\n    }\n\n    saveData = () => {\n        this.setState({ isSaveButtonDisabled: true })\n        let dbData = this.props.cars\n        let tableData = []\n        console.log('1')\n        //populating the array with data\n        this.gridApi.forEachNode(node =>\n            tableData.push(node.data)\n\n        )\n        console.log('tableDataLength: ', tableData.length)\n        console.log('dbDataLength: ', this.state.rowDataCopy.length)\n        var i = 0;\n        for (i; i < this.state.rowDataCopy.length; i = i + 1) {\n            console.log('current i: ', i)\n            let dbDataObject = this.state.rowDataCopy[i];\n            let tableDataObject = tableData[i];\n            console.log('DbDataObject: ', dbDataObject, '\\n',\n                'tableDataObject: ', tableDataObject,\n            )\n            if (!_.isEqual(dbDataObject, tableDataObject)) {\n                this.props.editCar(tableDataObject.id, tableDataObject);\n\n                console.log('they are different.')\n            }\n        }\n\n        if (tableData.length > this.state.rowDataCopy.length) {\n            let numberOfnewRows = tableData.length - this.state.rowDataCopy.length\n            console.log('number of new Rows: ', numberOfnewRows)\n            console.log('this.props.cars: ', this.props.cars)\n            var i = 0;\n            for (i; i < numberOfnewRows; i = i + 1) {\n                console.log('row: ', tableData[(tableData.length - numberOfnewRows + i)])\n                console.log('key: ', (tableData.length - numberOfnewRows + i))\n                this.props.addCars(tableData[(tableData.length - numberOfnewRows + i)])\n\n            }\n        }\n\n        this.gridApi.deselectAll()\n    }\n\n    deleteRow = () => {\n\n        this.state.gridApi.getSelectedNodes().map(node =>\n            this.props.deleteCar(node.data.id)\n        )\n        this.setState({ isDeleteButtonDisabled: true })\n    }\n\n    onSelectionChanged = () => {\n        this.state.gridApi.getSelectedNodes()\n    }\n\n    displayprops = () => {\n        console.log('props: ', this.props.cars)\n    }\n\n    addCar = () => {\n        const newCar = {\n            \"make\": \"newCar\",\n            \"model\": \"BMW\",\n            \"year\": 2020,\n            \"mileage\": 2000\n        }\n        Promise.resolve(this.props.addCars(newCar)).then(() =>\n            this.setState({ rowData: this.props.cars }))\n    }\n\n    onGridReady = async (params) => {\n        this.setState({\n            gridApi: params.api,\n            columnApi: params.columnApi\n        })\n\n        this.gridApi = params.api;\n        this.columnApi = params.columnApi;\n\n\n        console.log('onGrid is ready', this.gridApi, '\\n', this.props.cars)\n        if (this.props.cars === undefined) {\n            await store.dispatch(getCars());\n\n        }\n        console.log('reaqdyyy: ', this.props.cars)\n\n        const modelColumn = { ...this.state.columnDefs[1] }\n        // const yearColumn = JSON.parse(JSON.stringify(this.state.columnDefs[2]))\n        const yearColumn = { ...this.state.columnDefs[2] }\n\n        const mileageColumn = { ...this.state.columnDefs[3] }\n        const makes = this.props.cars.reduce((obj, item) => Object.assign(obj, { [item.id]: item.make }), {})\n\n\n\n        // this.gridApi.setColumnDefs(\n        this.setState({\n            columnDefs: [\n                {\n                    headerName: 'Make', field: 'make', editable: true, checkboxSelection: true,\n                    sort: 'asc',\n                    // cellEditor: 'agSelectCellEditor',\n\n                    // cellEditorParams: {\n\n                    //     //keys\n                    //     values: Object.keys(makes)\n                    // },\n\n                    valueGetter: function (params) {\n                        console.log('value getter: ', params.node)\n                        return params.node.data.make\n                    },\n\n                    valueSetter: (params) => {\n                        console.log('params: ', params)\n                        console.log('params.coldef.field: ', params.colDef.field)\n\n                        this.gridApi.flashCells({\n                            rowNodes: [params.node],\n                            columns: ['make_1'],\n                        });\n\n                        params.data.make = params.newValue;\n                        const tableData = []\n                        let count = 0;\n                        this.gridApi.forEachNode(node =>\n                            tableData.push(node.data)\n\n                        )\n                        console.log('value setter:')\n\n                        if (tableData.length === this.state.rowDataCopy.length) {\n                            console.log('equal: true')\n                            this.gridApi.forEachNode(node => {\n                                console.log('node.rowIndex: ', node.rowIndex)\n\n                                console.log('tableData: ', node.data.make, '\\n', 'dbData :', this.state.rowDataCopy[node.rowIndex].make)\n\n                                this.state.rowDataCopy.map(dbRow => {\n                                    if (dbRow.id === node.data.id) {\n                                        if (node.data.make !== dbRow.make) {\n                                            count += 1\n\n                                        }\n\n                                        if (count > 0) {\n                                            this.setState({ isSaveButtonDisabled: false })\n                                        }\n\n                                        else {\n                                            this.setState({ isSaveButtonDisabled: true })\n                                        }\n\n                                    }\n\n\n                                })\n\n                            })\n                        }\n\n\n                        else {\n                            this.setState({ isSaveButtonDisabled: false })\n                        }\n\n\n                        // var x = 0;\n                        // for (x; x < this.state.rowDataCopy.length; x = x + 1) {\n                        //     console.log('tableData: ', tableData[x].make, '\\n', 'rowData :', this.state.rowDataCopy[x].make)\n                        //     if (this.state.rowDataCopy[x].make !== tableData[x].make) {\n\n                        //         count += 1\n                        //     }\n\n                        //     else {\n\n                        //         // this.setState({ isSaveButtonDisabled: true })\n                        //     }\n\n                        //     if (count > 0) {\n                        //         this.setState({ isSaveButtonDisabled: false })\n                        //     }\n\n                        //     else {\n                        //         this.setState({ isSaveButtonDisabled: true })\n                        //     }\n\n\n                        // }\n\n\n\n                        if (params.newValue !== params.oldvalue) {\n                            return true;\n\n                        }\n                    },\n\n                    // displaying values\n                    // valueFormatter: function (params) {\n                    //     return makes[params.value];\n                    //     // return ('$' + params.value)\n                    // },\n\n                    // converting back to keys before saving.\n                    // valueParser: function (params) {\n                    //     return lookupKey(makes, params.newValue);\n                    // }\n                },\n                modelColumn, yearColumn, mileageColumn\n                // this.state.columnDefs[1], this.state.columnDefs[2], this.state.columnDefs[3]\n\n\n\n                //     // { headerName: 'Model', field: 'model', editable: true },\n\n                //     // { headerName: 'Year', field: 'year', editable: true },\n\n                // { headerName: 'Model', field: 'model', editable: true },\n                // { headerName: 'Year', field: 'year', editable: true },\n                // { headerName: 'Mileage', field: 'mileage', editable: true }\n            ]\n        })\n\n        this.setState((state) => ({ defaultColDef: state.defaultColDef }))\n\n\n\n        // })\n        // this.gridApi.setColumnDefs(\n        //     [\n        //         {\n        //             headerName: 'Make', field: 'make', editable: true, checkboxSelection: true\n        //             // , cellEditor: 'agSelectCellEditor',\n        //             // cellEditorParams: {\n        //             //     values: Object.keys()\n        //             // },\n        //             // valueFormatter: function (params) {\n        //             //     return lookupValue(carMappings, params.value);\n        //             // },\n        //             // valueParser: function (params) {\n        //             //     return lookupKey(carMappings, params.newValue);\n        //             // }\n        //         },\n        //         { headerName: 'Model', field: 'model', editable: true },\n        //         { headerName: 'Year', field: 'year', editable: true },\n        //         { headerName: 'Mileage', field: 'mileage', editable: true }\n        //     ]\n        // )\n\n\n\n    }\n\n    displayCopy = () => {\n        var array = []\n\n        this.state.gridApi.forEachNode(node =>\n            array.push(node)\n\n        )\n        console.log('Db data: ', this.state.rowDataCopy)\n        console.log('table Data: ', array)\n        console.log('displayed rows count: ', this.gridApi.getDisplayedRowCount())\n\n        var rowNode = this.gridApi.getDisplayedRowAtIndex(0);\n        this.gridApi.flashCells({\n            rowNodes: [rowNode],\n        });\n\n    }\n\n\n\n\n\n    rowSelected = () => {\n\n        if (this.gridApi.getSelectedNodes().length > 0) {\n            this.setState({ isDeleteButtonDisabled: false })\n\n        }\n\n        else {\n            this.setState({ isDeleteButtonDisabled: true })\n        }\n\n\n\n\n\n        // //unselected\n        // if (this.gridApi.getSelectedNodes() < 1) {\n        //     console.log('row has been unselelected')\n        // }\n\n        // //selected\n        // else {\n        //     console.log('selected')\n        // }\n\n    }\n\n\n    render() {\n        console.log('render.. ', this.props.cars)\n\n\n        return (\n            <React.Fragment>\n                <IconButton onClick={this.onNewRowClick}>\n                    <AddIcon color=\"secondary\" style={{ fontSize: 35 }} />\n                </IconButton>\n\n                <IconButton onClick={this.saveData} disabled={this.state.isSaveButtonDisabled} color=\"secondary\" style={{ fontSize: 35 }}>\n                    <SaveIcon />\n                </IconButton>\n\n                <IconButton onClick={this.deleteRow} disabled={this.state.isDeleteButtonDisabled} color=\"secondary\" style={{ fontSize: 35 }} >\n                    <DeleteSharpIcon />\n                </IconButton>\n\n                <button onClick={this.addCar}>Add new car</button>\n                <button onClick={this.editCars}>Edit car with id 1</button>\n                <button onClick={this.changeColumns}>Edit column defs</button>\n                <button onClick={this.onGetSelectedRows}>Get selected rows</button>\n                <button onClick={this.onNewRowClick}>add new row</button>\n                <button onClick={this.displayprops}>display props</button>\n                <button onClick={this.displayCopy}> display</button>\n\n                <div className=\"ag-theme-balham\" style={{ height: '100%', width: '810px' }}>\n\n                    <AgGridReact\n                        // reactNext\n                        // deltaRowDataMode\n                        // getRowNodeId={data => data.transaction_id}\n\n\n\n\n                        onGridReady={this.onGridReady}\n                        // onRowSelected={this.rowSelected}\n                        onSelectionChanged={this.rowSelected}\n                        enableSorting={true}\n                        columnDefs={this.state.columnDefs}\n                        rowData={this.props.cars}\n                        singleClickEdit={true}   // allows a single click to enable cell/row editing\n                        rowSelection=\"multiple\"\n                        domLayout='autoHeight'\n                        defaultColDef={this.state.defaultColDef}\n\n\n\n                    // deltaRowDataMode={true}\n                    // getRowNodeId={this.state.getRowNodeId}\n\n\n\n                    >\n                        {/* <AgGridColumn headerName='Make' field='make' editable={true} checkboxSelection={true}></AgGridColumn>\n                        <AgGridColumn headerName='Model' field='model' editable={true} ></AgGridColumn>\n                        <AgGridColumn headerName='Year' field='year' editable={true} ></AgGridColumn>\n                        <AgGridColumn headerName='Mileage' field='mileage' editable={true} ></AgGridColumn> */}\n\n\n\n\n\n                    </AgGridReact>\n                </div>\n            </React.Fragment>\n        )\n    }\n}\n\n\n\nconst mapStateToProps = (state) => ({\n    cars: state.carReducer.cars\n\n});\n\nexport default connect(mapStateToProps,\n    { getCars, addCars, editCar, deleteCar }, null, { forwardRef: true })(Home)\n\n\n\nfunction extractValues(mappings) {\n    return Object.keys(mappings);\n}\nfunction lookupValue(mappings, key) {\n    return mappings[key];\n}\nfunction lookupKey(mappings, name) {\n    for (var key in mappings) {\n        if (mappings.hasOwnProperty(key)) {\n            if (name === mappings[key]) {\n                return key;\n            }\n        }\n    }\n}\n\n\n        // let result = Promise.resolve(store.dispatch(addCars(newCar)))\n        //     .then(() => { console.log(this.props.cars) })\n\n\n    // axios.get('http://localhost:8000/api/cars/')\n    //   .then((response => {\n    //     console.log('response: ', response.data)\n\n    //   }))\n\n    // let response = await fetch('http://localhost:8000/api/cars/');\n    // let data = await response.json()\n    // console.log('data :', data)\n\n\n    // state = {\n    //     cars: ['cars']\n    // }\n\n    // componentDidMount() {\n    //     this.props.getCars()\n    // }\n\n    // editCars = () => {\n    //     const newCar = {\n    //         \"make\": \"111\",\n    //         \"model\": \"Caravan\",\n    //         \"year\": 2000,\n    //         \"mileage\": 2000\n    //     }\n\n    //     this.props.editCar(80, newCar)\n\n\n    // }\n\n    // deleteCar = () => {\n    //     this.props.deleteCar(2)\n\n    // }\n\n    // dispatchCars = () => {\n\n    //     const newCar = {\n    //         \"make\": \"Dodge\",\n    //         \"model\": \"Caravan\",\n    //         \"year\": 2003,\n    //         \"mileage\": 250000\n\n\n    //     }\n\n    //     this.props.addCars(newCar)\n    //     console.log(this.props.cars)\n\n    // }\n\n\n    // dispatchCars1 = () => {\n\n    //     const newCar = {\n    //         \"make\": \"Dodge\",\n    //         \"model\": \"Caravan\",\n    //         \"year\": 2003,\n    //         \"mileage\": 250000\n\n    //     }\n\n\n\n    //     store.dispatch(addCars(newCar))\n\n\n\n    // }\n\n\n\n    // return (\n    //     <div>\n    //         <p>{this.state.cars}</p>\n    //         <p>working</p>\n    //         <button onClick={this.dispatchCars}>this.props.addCars(newCar)</button>\n    //         <br />\n    //         <button onClick={this.dispatchCars1}>store.dispatch(newCar)</button>\n    //         <br />\n    //         <button onClick={this.editCars}>Edit car with id 2</button>\n    //         <br />\n    //         <button onClick={this.deleteCar}>Delete car with id2</button>\n\n\n    //         {\n    //             this.props.cars.map(car => {\n    //                 return <h1>{car.make}</h1>\n    //             })\n    //         }\n\n    //     </div >\n    // )\n\n      // componentDidUpdate(prevProps, prevState) {\n    //     if (this.state.gridApi !== prevState.gridApi) {\n    //         console.log('gridApi not undefined: ', this.state.gridApi)\n    //     }\n    // }\n\n\n\n\n// GRID IS READY AND THIS.PROPS.DATA IS AVAILABLE.\n\n    // onGridReady = async (params) => {\n    //     this.setState({ gridApi: params.api })\n    //     this.gridApi = params.api;\n    //     this.columnApi = params.columnApi;\n    //     console.log('onGrid is ready', this.gridApi, '\\n', this.props.cars)\n    //     Promise.resolve(this.props.getCars()).then(() => {\n    //         console.log('reaqdyyy: ', this.props.cars)\n    //         this.gridApi.setColumnDefs("]},"metadata":{},"sourceType":"module"}